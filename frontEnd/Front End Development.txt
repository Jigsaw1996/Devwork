Front End Development Guide

	I will be using this document to note down everything that I have been learning in order to complete my Front End Developer Course. 
	
	OTHER RELEVENT DOCUMENTS
	HTML GUIDE
	CSS GUIDE
	JAVASCRIPT GUIDE
	
	GIT GUIDE

	
Contents

	1 Reopening the Box Model
		1.1 HTML Refresh
		1.2 Coding In An Editor
		1.3 The Box Model
		1.4 Border and Border Radius
	
	2 Reopening The Box Model 2
		2.1 Display Properties
		2.2 Centering Elements
		2.3 A Walk Through
		2.4 Shorthand
		2.5 Validator
		
	3 Positioning and CSS
		3.1 CSS3 Border Box
		3.2 Vendor Prefixes
		3.3 Positioning and Flow
			3.3.1 Static
			3.3.2 Relative
			3.3.3 Absolute
			3.3.4 Fixed
		3.4 Further Absolute Positioning
		3.5 The Developer Tools
		3.6 Fixed Positioning
		3.7 Types of Stylesheet
			3.7.1 Internal Stylesheets
			3.7.2 External Stylesheets
			3.7.3 Inline Styles
		3.8 The Cascade
			3.8.1 Style Priority
		3.9 Summary
		
	4 Media
		4.1 The img Tag
			4.1.1 Positioning Images
			4.1.2 Floating Images
		4.2 Background Image
		4.3 CSS Filters
		4.4 HTML Video
			4.4.1 Video Attributes
			4.4.2 Media Fragments
		4.5 HTML Audio
			4.5.1 Audio Attributes
			
	5 Gradients, Transforms and Transitions
		5.1 Gradients
			5.1.1 Linear Gradients
			5.1.2 Multiple Color Stop Gradients
			5.1.3 Transparency with RGBA
			5.1.4 Radial Gradients
		5.2 Transformations
			5.2.1 Rotate
			5.2.2 Scale
			5.2.3 Skew
			5.2.4 Translate
		5.3 3D Transformations
			5.3.1 3D Rotate
			5.3.2 3D Translate
			5.3.3. Perspective
		5.4 Transitions
		5.5 Animations With CSS
		
	6 Mobile and Navbar - CSS Selectors 
		6.1 Mobile First
		6.2 Relative Widths
		6.3 Media Queries 
			6.3.1 Parameters
		6.4 Setting the Viewport
		6.5 Advanced CSS Selectors
			6.5.1 Pseudo-Classes
			6.5.2 Pseudo-Elements
		6.6 Table Related Elements
		
	7 Flexbox
		7.1 Setting Up A Flexbox
		7.2 Axes
		7.3 Properties For Flexbox
			7.3.1 Flex Direction
			7.3.2 Flex Wrap
			7.3.3 Shorthand
		7.4 Alignment
			7.4.1 Justify Content
			7.4.2 Align Items
		7.5 Flex Attribute
		7.6 Ordering Flex Items
		
	8 Semantic Web and Font
		8.1 Semantic Tags
		8.2 Fonts
			8.2.1 Font Size
			8.2.2 Font Style
			8.2.3 Font Weight
			8.2.4 Color
		8.3 Custom Fonts
			8.3.1 Font Face
			8.3.2 Link in HTML
		8.4 Text Attributes
		8.5 Measurements
			8.5.1 Relative Lengths
			8.5.2 Absolute Lengths
			8.5.3 Measurement Types Explained
		8.6 Responsive Font Sizing
		
	9 User Experience Design
		9.1 User Experience (UX)
			9.1.1 Surface
			9.1.2 Skeleton
			9.1.3 Structure
			9.1.4 Scope
			9.1.5 Strategy
		9.2 User Centered Design
			9.2.1 UX Designer
			9.2.2 UI Designer
			9.2.3 Graphic Designer
		9.3 Understanding Users
		9.4 Personas
		9.5 Usability
		9.6 Prototyping
		
	10 Balsamiq
		10.1 The Basics
		
	11 Forms
		11.1 Forms Explained
		11.2 Form Attributes
		11.3 Input Types
		11.4 More Form Tags
		11.5 Numbers and Patterns
			11.5.1 Pattern
		11.6 Select Boxes
		11.7 List and Datalist
		11.8 Focus
		11.9 Summary
		
	12 Bootstrap
			

1 Reopening the Box Model

	Video https://youtu.be/th_A4a6vPm0
	
	Here we will look into how web pages are structures and achieve an effective and clear design. 
	
	
1.1 HTML Refresh

	HTML stands for Hypertext Markup Language.
	
	The extention is .html
	
	It's used to provide structure and content to electronic documents, typically viewed in web browsers. 
	
	I've covered all this before and can all be viewed in the HTML guide, but lets have a short refresh. 

	A typical HTML Document
	
	<!DOCTYPE html>
	<html>
		<head>
			<title>Page Title</title>
		</head>
		<body>
			<h1>My Page</h1>
			<p>A paragraph</p>
			
	MOZILLA HAVE KINDLY PROVIDED AN ENTIRE LIST OF HTML ELEMENTS.

	https://developer.mozilla.org/en-US/docs/Web/HTML/Element
	
	OTHERWISE USE THE HTML DOCUMENT I MADE, THAT'S WHAT IT'S THERE FOR. 
	
	
1.2 Coding In An Editor

	The most popular editor at the moment is Sublime Text. 
	
	Download link here - http://www.sublimetext.com/3
	
	A few notes on files -
	- Don't save files with spaces.
	- Remember to keep git updated with changes. 
	- Sublime has a view in browser option on right click. Use it.
	
	
1.3 The Box Model

	Web Pages are comprised of HTML and CSS elements. Positioning these elements on a web page allows you to have complete control over how the page looks.
	
	Here we will look at how to control layout. 
	
	When discussing web design and layout, the "Box Model" os the collective term that is used to describe how elements are spaced on the page.
	
	The box model of an element works like the below. 
	
	Content Area
	Padding
	Border
	Margin
	=
	Total Width
	
	The Total Width is equal to all of the above factors, on both sides.
	
	See the box model example to see how this works. 

	
1.4 Border and Border Radius

	There are a number of border styles, as seen below:
	solid
	dashed
	dotted
	double
	groove
	ridge
	inset
	outset
	
	This can be individually set using the border-style: ; property. 
	

	Border Radius is a new CSS3 property. It gives rounded corners to a border without use of an image. 
	
	It works using the border-radius property. 
	
	border-radius: ;
	
	A circle is equal to the height/width, or 50% if working with percentages.

	
	It can be written with individual values for each corner. 
	
	For example: 
	
	border-radius: top-left top-right bottom-right bottom-left;
	
	Each corner can also have a different radius for either side, done using a / as seen below.
	
	border-radius: 120px/30px

	This gives both sides different values. 
	
	See the border radius examples for how this is done.
	
	
2 Reopening The Box Model

	Video - https://youtu.be/M3aq4tQvAOs

	Following on from the previous lesson, having the ability to control layout is highly dependent on the display property. 
	
	In this lesson we will discuss how you can apply different display properties to achieve various results. 
	
	We will also cover shorthand syntax. 
	
	
2.1 Display Properties

	For the purpose of CSS styling, elements can be divided into a few different categories. 
	
	Each element has it's own default display, but this can be manually changed in CSS to impact display. 
	
	The display types are below:
	Block - These elements take up the full width if it's line. Examples: <p> <h1> <div>
	Inline - These elements only take up the room they need to, and can sit alongside one another. Examples: <strong> <a> <span>
	Inline-block - This is a mix of the previous 2. Will sit alongside other element, but will accept height and width editing. Examples: <img>
	None - Item doesn't appear at all, taking up no room. 
	
	
2.2 Centering Elements

	To center inline elements within it's container, do the below. 
	
	text-align: center;
	
	To center block elements within it's container, the left and right margins have to be set to auto, so that the browser will automatically set them equally.
	
	margin: 0 auto;
	
	
2.3 A Walk Through

	Lets put these lessons into practice by demonstating how to make the following layout.
	
	http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/walkthru1-1-e1456941630446.png
	
	We make this by using inline-blocks for adjascent containers. 
	
	However this has it's issues. inline-block elements have natural spacing which can add to total widths etc, due to them typically being used for text.
	
	To solve this, we need to remove the white space. This is done by setting the font size of the parent container to 0. The children can then be given the font size.
	
	However this only works with px or % amounts. This doesn't work with ems. There are workarounds for this however. See here: https://davidwalsh.name/remove-whitespace-inline-block
	
	In any case, the example uses the following to create layouts:
	
	display: ;
	float: ;
	width: ; 
	height: ; - Left blank in some cases so that it will fit it's children.
	padding: ;
	margin: ;
	
	See the "Inline Block Positioning" example for how this is done.
	
	
2.4 Shorthand

	As already shown in the examples, we can write out padding, border and margin properties in a number of ways. 
	
	Longhand:
	margin-top: 20px;
	margin-right: 20px;
	margin-bottom: 20px;
	margin-left: 20px
	
	Simple Shorthand:
	margin: 20px;
	
	Ideal Shorthand:
	margin: 20px 20px 20px 20px;
	
	Similarly with borders:
	border-size: ;
	border-style: ;
	border-color: ;
	
	The last is ideal as it allows editing for each four corners seperately and makes it easy to come back to and edit. 
	
	Get into the habit of doing this. 
	
	Syntax:
	
	padding: top right bottom left;
	
	border: size type color;
	
	margin: top right bottom left;
	
	
2.5 Validator

	If you are looking to validate your code to make sure it is best practice and without any errors, use W3C.
	
	https://validator.w3.org

	Everyone prefers code that runs properly and without any annoying issues. 
	
	
3 Positioning and CSS

	Video: https://youtu.be/YT3UhoYL3B8

	In this lesson we peel back some CSS layers and see how it works. 

	We will look at the importance of positioning and flow in a document. 
	
	We will also reopen the Box Mode yet again and explore better ways of dealing with widths. 
	
	Includes:
	CSS3 Border-Box
	Position and Flow
	Absolute Positioning
	Developer Tools
	Fixed Positioning
	Cascading
	
	
3.1 CSS3 Border Box

	The last time we looked at the Box Model, we noted some of the difficulties involved in layout out a web page, including the maths.
	
	But what if you hate the maths? 1st World Problems right there.
	
	If you're lazy, CSS3 has border-box to make the maths easy. 
	
	Normal Full width:
	left margin + left border + left padding + content + right padding + right border + right margin = Full Width
	
	border-box Full Width:
	left margin + content + right margin = Full Width
	
	What this means is that you no longer have to worry about padding and border widths. 
	
	Border and padding are instead handled within the content width. 
	
	Syntax:
	
	box-sizing: border-box;
	
	The padding and border are contained as part of the content spacing. 
	
	
3.2 Vendor Prefixes

	Vendor Prefixes are a useful when it comes to elements not in full support yet.
	
	The CSS3 Spec is not fully signed off, so the browsers implement the features in their own way using prefixes until the entire spec is complete.
	
	This means that not all browsers fully support all tags.
	
	In time prefixes will disappear, but for now the newest tags need vendor prefixes. 
	
	Use the following site to see compatibility for tags: http://caniuse.com/
	
	See the CSS Guide for more info.
	
	These are the Vendor Prefixes. 
	
	Chrome, Safari, Newer Opera, Android  = -webkit-
	Firefox = -moz-
	Internet Explorer, Windows Edge = -ms-
	Older Opera = -Opera-
	

3.3 Positioning and Flow

	CSS allows us to position content on pages whichever way we want. This is one of CSS's key uses.
	
	We are going to continue using inline-blocks for most layout purposes and then look at flexboxes.

	An HTML page has flow, this is how elements know where they are to be positioned. Elements can position themselves in certain ways that go with or break the flow.
	
	Elements with flow interact with one another, either making space to be stacked above/below, or next to one another. 
	
	There are several position types which define the flow.
	
	Position Types
	
	Static
	Relative
	Absolute
	Fixed
	
	
3.3.1 Static

	Static is the default positioning of an element, where everything is stacked on top of one another. Everything flows down the page.
	
	This is what you're used to, unless explicitly changed. 
	
	
3.3.2 Relative

	Relative positioning maintains flow, taking the static position but allows us to offset the element in a certain direction. 
	
	For instance, we can set the element 100px to the left, and 10px the top, from it's original position.
	
	NOTE: IT STILL LEAVES SPACE WHERE THE ELEMENT WAS ORIGINALLY, THEREFORE NOT BREAKING THE FLOW OF THE PAGE.
	
	Moving elements can make them overlap. Use z-index: ; to set position. The highest number is displayed on top.
	
	Relative positioning is important as it interacts with absolute positioning.
	
	
3.3.3 Absolute

	Absolute positioning breaks the flow of the page. 
	
	The space which would normally be given to the element in the flow is instead occupied by the next in-flow item. It is positioned freely from an absolute position.
	
	Similar to relative positioning, they can be moved around, only they are moved from the top left of their parent element, providing it uses relative positioning. 
	
	If absolute elements are set without the parent being relative, it will set them in relation to the body instead, or the next higher non-static element. 
	
	Positioning the parent as a relative makes absolutes treat it as the container, because of it's non-fixed status.
	
	This gives a meaningful relationship between absolute children and their relative parents. 
	
	Moving elements can make them overlap. Use z-index: ; to set position. The highest number is displayed on top.
	
	
3.3.4 Fixed

	Fixed elements break the flow completely, not paying any attention to it. 
	
	The element will be fixed on the screen, not moving if scrolled etc. 
	
	They can be moved across the screen, relative to the top left corner of the user's screen. 
	
	Moving elements can make them overlap. Use z-index: ; to set position. The highest number is displayed on top.
	
	If no z-index is set, the element set last in the HTML will be displayed on top. 
	
	
3.4 Further Absolute Positioning
	
	Continuing with border-box related stuff, lets take a further look at absolute positioning. 
	
	See the Absolute Positioning tutorial for an example of how we can use absolute positioning to move an element around the page.

	This also shows amn example of using a relative parent, otherwise the item would move around from the body tag, not it's container like we want.
	
	This allows us to easily set the element's position.
	
	
3.5 The Developer Tools

	Most browsers have what are known as Developer Tools. These are really useful tools that allow us further inspection of web pages and their elements. 
	
	It also allows us to edit a page from our browser to see the effects etc.
	
	Press Ctrl + Shift + I to open this up for both Chrome and Firefox. 
	
	Pressing Ctrl + U opens up the page source itself. 
	
	
3.6 Fixed Positioning

	Lets go further with Fixed positioning. 
	
	In the Tutorials, new functionality has been added. At the bottom right of each page, there is now a link containing an image, which will allow users to scroll back to the top.
	
	It has been given position: fixed; and placed using bottom: ; and right: ;
	
	Be aware of overlapping positioning and use the z-index where necessary. 
	
	Because the elements are positioned last on HTML, they are automatically displayed on top. As no custom z-index has yet been set, it will automaically display over all other elements. 
	
	This highlights why you should watch where you place elements in HTML so that they benefit this. 
	
	
3.7 Types of Stylesheet

	CSS stands for cascading stylesheets. The cascade refers to how stylesheets all cascade together to form a single stylesheet in the end. 
	
	There are multiple ways stylesheets can be displayed. 
	
	
3.7.1 Internal Stylesheets

	These are located in the head of a HTML document, within the <style> tags. 
	
	These styles are specific to the page in question. 
	
	Example:
	
	<head>
		<style>
			p {
			color: red;
			}
		</style>
	</head>
	
	
3.7.2 External Stylesheets

	External Stylesheets are located externally to the HTML document, linked in the head of the html document. 
	
	External Stylesheets use the .css extention, and can be linked to as many pages as required. Multiple Stylesheets can be linked to, and they will all be added into one cascading stylesheet.
	
	It will read the first linked Stylesheet first, then the next, overriding any of the first Stylesheet's styles if there is overlap. 
	
	Example:
	
	<head>
		<link rel="stylesheet" href="style.css"></link>
	</head>
	
	External Stylesheets are the best to use as they can be linked on multiple pages and they completely seperate styling and content. 
	
	
3.7.3 Inline Styles

	Don't do this. 
	
	Inline styles uses the style="" attribute to style a HTML element. 
	
	This ruins the purpose of CSS, which is to seperte style from content. 
	
	As such don't bother with this. 
	
	Example:
	
	<p style="color: red;">Lorem Ipsum</p>
	
	
3.8 The Cascade

	When Stylesheets are read, it's likely there will be overlap of styles.
	
	For example, in an external Stylesheet, you might get this.
	
	p {
		color: blue;
	}
	
	But an internal Stylesheet may then say this.
	
	p {
		color: red;
	}
	
	Which does it use? 
	
	It'd be red, and here's why. 
	
3.8.1 Style Priority
	
	One of the governing principles behind CSS is that the browser loads the last as priority. 
	
	The browser loads stylesheets in this order:
	
	1. External Stylesheets
	2. Internal Stylesheets
	3. Inline Styles
	
	As a result, if each of the three offer conflicting styles, the inline style would be used as it's loaded last, overriding the previous ones. 
	
	Similarly when reading individual Stylesheets, it reads from top to bottom, so lower styles have priority. 
	
	UNLESS the style is more specific. 
	
	Specificity is another important aspect. The more specific, the higher the priority. 
	
	Below is the specificity order:
	
	1. ID's have highest priority, as they are unique. 
	2. Classes are next as they are more specifically named than elements. 
	3. Elements then come last, as they aren't as specific. 
	
	To explain further. 
	
	Example:
	
	p {
		color: purple;
	}
	
	#red {
		color: red;
	}
	
	.blue {
		color: blue;
	}
	
	What colour would a paragraph with an id of "red" and a class of "blue" be? 
	
	It'd be red, because id's have a higher priority than classes and elements. 
	
	It's best practice to start each stylesheet with the least specific options then work your way down to more specific styling. This is easier to read and maintain.
	
	
3.9 Summary

	The ability of CSS to polition elements and content on a web-page in almost any way imaginable is one of it'ss primary assets. 
	
	Taking what has been learned about the box model and positioning, means we are on our way to becoming web designers. 
	
	Understanding positioning is key to mastering web page layouts. 
	
	
4 Media

	Video: https://youtu.be/wbEy2C2cJAo
	
	HTML5 introduces both audio and video support. 
	
	CSS3 also comes with some cool new image related editing.
	
	In this section we will learn a bit more about how to use Media related content. 
	
	Includes:
	Using the img tag
	Media filters
	Embedding video
	Embedding audio
	
	
4.1 The img Tag

	We have already seen  how the <img> tag is used to represent images in HTML.
	
	<img src="image.png" alt="alt txt" />
	
	Firstly there are several image formats supported.
	
	These include:
	jpeg
	png
	svg
	gif
	
	Lets look further into best practices for images. 
	
	An image must always have an alt attribute, to give some information on the image inc ase it cannot load, and is also useful for SEO etc. 
	
	It's also desirable to include a width and height attribute so that, when the image loads, there is already a space in the flow of the document for the image.
	
	This solves possible display issues with large images. 
	
	Please see the "Image Positioning Example" document for examples for all positioning types. 
	
	
4.1.1 Positioning Images

	The img tag is, by default, an inline-block element. So it will sit alongside other elements such as text.
	
	However, this will not always be visually ideal. 
	
	As such, it's useful to set images to display as a block element unless specifically required otherwise. 
	
	display: block;
	
	
4.1.2 Floating Images

	Now this is where floating comes in. 
	
	Floating allows for two or more elements in the same container to wrap around one another by floating one of them. In this case, an image and some text.
	
	Floating moves an item to the left or right of the container. Any unfloated elements in the container will move up to fill the available space.
	
	img {
		float: left;
	}
	
	Unlike either block or inline-block, the elements will naturally wrap around next to each other, creating a much more natural appearance.
	
	Using margin is particularly important when doing this, so that there is space between the text and the floated image.
	
	Floating was originally designed to solve the issue of text on images, though it is often used for positioning. We won't find that in this course, we have something much more interesting. 
	

4.2 Background Image

	Background images can be used to add images as a form of backdrop to an element. 
	
	This is done using the background-image attribute. 
	
	background-image: url(link);

	Multiple backgrounds can be added by comma seperating them. Overlapping background images will display the first declared on top. 
	
	The background-size attribute can be used to set what it's size is. 
	
	background-size: cover/contain/100px 100px;
	
	Cover - Will make the background image cover the element, and the aspect ratio will be maintained. 
	Contain - Will fit the element exactly, though this may cause sizing issues. 
	
	ASPECT RATIO IS THE RATIO OF THE WIDTH TO THE HEIGHT OF AN IMAGE
	
	There are also some other attributes, such as background-repeat and background-position. 
	
	Lastly background-attachment will set how the image reacts to scrolling. Setting this to fixed will create a paralax.
	
	See the CSS Guide for more info on these.
	
	
4.3 CSS Filters

	CSS Filters are applied to basic HTML elements, such as image and video. 
	
	They are made using the filter: ; attribute. 
	
	REMEMBER to use the webkit prefix for support on chrome.
	
	The attribute allows for basic editing of their display etc, such as images.
	
	Here are the options below:
	
	filter: greyscale(1); 
	
	filter: blur(5px);
	
	filter: sepia(1);
	
	filter: hue-rotate(279deg);
	
	filter: saturate(.9);
	
	filter: opacity(.5);
	
	filter: brightness(.9);
	
	filter: contrast(1);
	
	Most filters go between 0 and 1, with values inbetween. 1 is always max, 0 is minimum. 
	
	Multiple filters can be added to an element by putting a space between them.
	
	To overide filters on an element. Use the below:
	
	original: unfiltered;
	
	Please look at the Filter Example for tutorials on how to do these. 
	
	
4.4 HTML Video

	HTML5 introduced the video tag, which embeds a video player into the page.
	
	Previously it was impossible to embed video into a web page without third party plugin players such as Flash, Silverlight or QuickTime.
	
	There's still no single agreed video codec for HTML5. Different browsers support different formats.
	
	These are the most commonly supported video formats:
	
	.mp4
	.ogv
	.webm
	
	The video tag is used as seen below.
	
	<video controls="controls">
		<source src="video/Rabbit_MP4.mp4" type="video/mp4" />
	</video>
	
	The source tag specifies the video to be loaded for the tag. 
	
	Multiple source tags can be used. The browser will try the first one and, if it cannot load it, will try the next.
	
	As such it is good to provide multiple formats of the video, so that all browsers will be able to run it.
	
	The source tag also has the type attribute. This will make the browser not try to load any unsupported video at all, which saves load times.
	
	THE CONTROLS ATTRIBUTE IS MANDATORY. 
	
	Supported Formats for each browser - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/unit-4-20.png
	
	
4.4.1 Video Attributes

	As well as standard attributes similar to images, such as width and height, the video tag has some specific attributes.
	
	preload="none/metadata/auto" - Sets if it should preload the video or not.
	
	poster="img/jazz.jpg" - Sets an image as a placeholder before the user hits play. 
	
	autoplay - Placing this in the video tag means the video will play automatically upon page load.
	
	
4.4.2 Media Fragments

	What if you want the video to start playing from 10 seconds in?
	
	This is done by adding the below to the end of the video URL.
	
	#t=10
	
	An end time can also be added using comma seperation.
	
	#t=10,25
	
	EXAMPLE
	
	<source src="video/catvid.mp4#t=20,30" type="video/mp4" />


4.5 HTML Audio

	Similar to the video tag, HTML5 introduced an audio tag for embeding audio into the page. 
	
	Try to get one of the below formats to ensure support for all browsers:
	.mp3
	.ogg
	
	Audio is embedded as seen below.
	
	<audio controls="controls">
		<source src="celiband.mp3" type="audio/mpeg; codecs=mp3" />
		<source src="celiband.ogg" type="audio/ogg; codecs=vorbis" />
	</audio>
	
	Just like with the video tag, the audio tag contains sources. The browser will try the top first, then the second till it finds a supported version.
	
	The type attribute specifies the audio format for that video, so that the browser only attempts to load supported formats.
	
	The type attribute uses the codects selector. As seen in the first one, if the browser supports mpeg but not the specified codecs, the audio will not load.
	
	Supported formats for each browser - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/unit-4-20.png
	
4.5.1 Audio Attributes

	Similar to the video tag, the audio tag has some specific attributes.
	
	preload="none/metadata/auto" - Specifies if the audio is preloaded into the browser or not, or simply it's metadata.
	
	autoplay="autoplay" - Will play the audio as soon as it loads.
	
	loop="loop" - Will make the audio loop upon ending.
	
	See the Audio and Video Example for help with both of these.
	

5 Gradients, Transforms and Transitions

	Video: https://youtu.be/Y-Z1l6WnGqI
	
	In this section, we will be looking into how to create gradients, transformations and transitions.
	
	Gradients in particular used to be a pain, but now have direct support in CSS3.
	
	Includes:
	Gradients
	Transforms
	Transitions
	
	
5.1 Gradients

	CSS3 gives us the ability to add gradients to backgrounds and buttons.
	
	This is done using the backgroun attribute.
	
5.1.1 Linear Gradients

	Linear gradients work by having two colors which change in a certain direction over the background.
	
	background: linear-gradient(to [direction], [first color], [second color]);
	
	The direction can be top, bottom, left or right. It can also be a degree value.
	
	EXAMPLE
	
	background: linear-gradient(to left, #FF4E50, #F9D423)
	
	
5.1.2 Multiple Color Stop Gradients

	Linear Gradients can also be used to create color stops.
	
	These allow for many colors, with set points for when they shoul begin and end.
	
	background: linear-gradient(to [direction], [first color] [first color stop], [second color] [second color stop])
	
	The color stop is the percentage in the given direction where that color should stop.
	
	EXAMPLE
	
	background: linear-gradient(to right, #FFED21 1%, #FF2A06 50%, #9412FF 100%);
	
	
5.1.3 Transparency with RGBA

	It's not possible to control transparency with HEX.
	
	We can instead use rgba to do this.
	
	RGBA has four values. Red, Green, Blue and transparency, 
	
	The colour options run up to 255. Transparency is between 0 and 1.
	
	rgba(255,0,0,1) - Fully visible red.
	rgba(255,0,0,9) - Invisible red.
	
	But how do we use this with gradients?
	
	By placing the RGBA within brackets in the relevant place. 
	
	EXAMPLE
	
	background: linear-gradient(-45deg, rgba(0,0,0,0), #ff0000);
	
	
5.1.4 Radial Gradients

	Radial gradients is a gradient from a single point, rather than across the background.
	
	This is done using radial-gradient instead of linear-gradient. 
	
	background: radial-gradient([first color], [second color]);
	
	The center of the image will be the first color, and as it exands it will turn into the second color.
	
	Similar to linear backgrounds, we can set color stops.
	
	EXAMPLE
	
	background: radial-gradient(#5f2c82 40%, #3498db 60%);
	
	
5.2 Transformations

	The transform property is one of the newly minted CSS3 features.
	
	They are used to manipulate the shape of elements.
	
	There are two types of transformations. 2D and 3D. 3D transformations are discussed in the next section. 
	
	These are the transformations possible:
	
	Scew - Pushes the element, shifting it's top and bottom apart. 
	Scale - Makes the element move closer or further aay from the screen.
	Rotate - Rotates the element.
	Translate - Moves an element across the page from it's initial position.
	
	This image accurately represents each of the transforms possible: http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/15-768x240.png
	
	All transformations are done using the transform property, then the transform type with the value in brackets.
	
	transform: type(value);
	
	Multiple can be set at the same time by placing a space between them.
	
	See the Transforms Example for examples for each of these.
	
5.2.1 Rotate

	Rotations are clockwise by defaukt and measured in degrees.
	
	Anti-clockwise is done using the - sign. 
	
	EXAMPLE
	
	transform: rotate(10deg); 
	transform: rotate(-10deg);
	
	The first rotates it clockwise, the second anti-clockwise.
	

5.2.2 Scale

	Scaling an element increases or decreases it's size. 
	
	We can scale along both the x and y axis.
	
	EXAMPLE
	
	transform: scale(2, .5);
	
	This scales the element to be twice as large along the x axis, and half the size on the y axis.
	
	
5.2.3 Skew

	Skewing an element stretches it in one or more directions. 
	
	We can skew both the x and y axis.
	
	Values are calculated using degrees. 
	
	EXAMPLE
	
	transform: skew(5deg, 10deg)

	This skews 5deg n the x axis, and 10 on the y-axis.
	
	
5.2.4 Translate

	Translating an element offsets it's position.
	
	This is done using pixels, for both the x and y axis.
	
	EXAMPLE
	
	transform: transform: translate(200px, 100px);
	
	
5.3 3D Transformations

	Now that we've looked at 2D transformations along the x and y axis', we can look at transforming along the z axis.
	
	The syntax of 3D transformations have changed slightly. The type of transformation has "X" "Y" or "Z" on the end, and it only specifies a single value. 
	
	EXAMPLE
	
	transform: rotateZ(30deg);
	
	This can also be done for X and Y axis' for 3D transformations with them.
	
	See the Transformations Examples for examples of each of these.
	
	
5.3.1 3D Rotate

	This image best represents the effects of this. 
	
	http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/16-e1444405054123.png
	
	The element can be rotated in all 3 axis's.
	
	EXAMPLE
	
	transform: rotateX(30deg) transformY(30deg) rotate(30deg);
	
		
5.3.2 3D Translate

	Items can also be translated in 3D.
	
	This image shows the effects of this.
	
	http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/17-e1444405134471.png
	
	EXAMPLE
	
	transform: translateZ(30deg);
	
	
5.3.3. Perspective

	Perspective can be tricky to explain on a 3D screen.
	
	The perspective measurement is in pixels, between 0 and 1000px. 
	
	The principle is that, the higher the value, the further away the perspective appears.
	
	The lower the value, the closer the perspective appears.
	
	A low perspective value creates a sense of depth as you are closer to the object.
	
	EXAMPLE
	
	transform: perspective(600px) rotateY(45deg);
	
	This makes it appear like the left of the element is closer to the screen.
	
	
5.4 Transitions

	CSS3 transitions allow for smooth, simple and elegant animations for webpages to utilize. 
	
	Transitions can be added to any element so that when a specific (or any) property is changed, the change happens gradually.

	transition: [transition-property] [transition-duration] [transition-timing-function] [transition-delay];
	
	To apply a transition time for all transitions, simply do the below:
	
	transition: 0.5s;
	

5.5 Animations With CSS

	Now that we know what transitions are, we can learn more about how to do animations in CSS. 
	
	Wecan use keyframes to animate transitions.
	
	The difference between the two types is that the animation can start on page load, by delay etc rather than just an event such as hover.
	
	@keyframes identifier {
		/* Rule Sets */
	}
	
	The identifier is used to refer to the animation.
	
	The rule sets can use selectors such as percentages (66% { etc) or "from" and "to." The keyframe will then animate through these.
	
	The keyframe is then assosiated with an element by giving the element "animation-name: ;" in css.
	
	There are several other rules as well:
	
	animation-name: ; - Sets the name of the animation. The matching keyframe identifier will be it's animation.
	animation-duration: ; - Sets how long the animation will go on for.
	animation-delay: ; - Sets a delay for the animation.
	animation-timing-function: ; - Sets the type, such as "ease" or "linear".
	animation-fill-mode: ; -Setting this to "forwards" makes the element maintain the animation's end value upon finishing. 
	
	DON'T go overboard with animations. 
	
	See the animations example for tutorials on these. 
	
	
6 Mobile and Navbar - CSS Selectors 

	Video: https://youtu.be/iJKJr8zxSGo
	
	Mobile devices are more frequently used for browsing than a few years ago.
	
	As such we need to take this into account when building websites. 
	
	Constraints on screen size, internet and device speed are required when designing for mobile.
	
	Use of touchscreen is also very different to use of mouse, which will need to be understood for good accessibility.
	
	Outcomes:
	
	Responsive Design
	Mobile first
	Building site navigation
	CSS selectors
	Pseudo classes (:)
	Pseudo elements (::)
	Table Related Elements and Selectors


6.1 Mobile First

	When mobile browsing first began, it was niche and not very thought of.
	
	You'd most likely build a desktop version, then work your way down.
	
	Mobile First design reverses this, for several reasons, one being progressive enhancement.
	
	The philosophy behind progressive enhancement is to only show the very minimum needed for the device. The site can then gradually be enhanced for larger platforms. 

	As such, the code we write (or at least display) first is the CSS for mobile, then work our way up.
	
	We do this using media queries.  

6.2 Relative Widths

	One of the key parts of responsive design is use of relative widths instead of fixed widths.
	
	img {
		width: 720px; #Fixed width, will always take up 720px width on all devices.
	}
	
	img {
		width: 100%; #Relative width. Will change dynamically for all devices so that it takes up 100% of the width on that row.
	}
	
	
6.3 Media Queries 

	Media queries are badass. They allow us to set styles which only apply to devices within a certain width.
	
	This means the site can have different layouts for desktop, tablet and mobile without building different sites or requiring seperate stylesheets. 
	
	@media parameters {
	
		/* Styles will only be applied if it meets the parameter. */
	
	}
	
	
6.3.1 Parameters

	@media screen and (max-width: 400px) {

	The above first asks if we are using a screen, and if the screen width is less than 400px.
	
	If it is, styles located in the query will be read and applied. 
	
	
6.4 Setting the Viewport

	The first thing we want to do is to set the page width equal to the width of the device.
	
	The meta viewport tag gives the browser instructions on how to control the page dimensions and scaling.
	
	<meta name="viewport" content="width=device-width, initial-scale=1">

	This will force browsers to make use of 100% of the screen, including when the screen is rotated etc. 
	
	
6.5 Advanced CSS Selectors

	Lets have a look at some more advanced CSS selectors.
	
	See the CSS Selector Examples for guides for each of these listed below.
	
	Remember the ones we already have?
	
	type - Selecting the HTML element
	id - Selecting a unique ID.
	class- Selecting a class of elements.
	
	Now lets look at some others:
	
	* - Selects all elements. Can be used on parents to select all children. Best not to be overused.
	
	Descendant - Can be used to select only elements that follow a certain path. i.e: ul li a {
	
	Direct Descendant - Used to select only direct children down the descent. i.e: ul > li > a {
	
	Attribute - Used to select an element with certain attributes only. i.e a[style="text-decoration: none"] {
	
	
6.5.1 Pseudo-Classes

	These are a special type of selector.
	
	They are used to target an element specifically in a variety of situations.
	
	Link Based;
	
	:hover - Styles for when hovering over the item.
	:visited - Styles for when the link of an anchor tag has been visited.
	:active - Styles for when the link has been activated (clicked etc).
	
	Position Based;
	
	:first-child - Selects the first child element within it's parent.
	:last-child - Selects the last child element within it's parent.
	:first-of-type - Selects the first occurence of an element type within it's parent.
	:first-of-type - Selects the last occurence of an element type within it's parent.
	:nth-child(x) - Replace x with the order number of the element you wish to select.
	
	nth-child can be used to select all elements in multiples of 2 etc by doing "2n" as it's value. Multiples of 3 would be "3n" and so on.
	
	TAKE INTO ACCOUNT HOVER ETC ISN'T POSSIBLE ON MOBILE.
	
	
6.5.2 Pseudo-Elements

	These use two colons instead of one, and are used to style specific parts of an element.
	
	::first-line - Selects only the first line. Typically used on text.
	::first-letter - Selects only the first letter. Typically used on text.
	::selector - selects the portion of an element selected by the user.
	::placeholder - Useful for setting placeholder text onto an input field.
	::before - Adds styling directly before the element.
	::after - Adds styling directly after the element.
	
6.6 Table Related Elements

	We haven't touched on table elements much recently. Here's a quick rundown.
	
	<table> - Used to place the table and it's children.
	<th> - Contains table data used for the header
	<tr> - Placed within a table tag to denote a new row. Elements within this will be in that row.
	<td> - Placed within a row to denote a data column.
	
	The below can be added to a table to make the table data collapse and close up around each other. If margins are intended, don't use this.
		
		border-collapse: collapse;
	
	See the "Table Example" for an example of a table making good use of a range of selectors to accomplish a clean layout. 


7 Flexbox

	Video: https://youtu.be/NEQV2Fm7eXQ
	
	Using CSS to control layout can be a hastle. Especially when it comes to positioning. 
	
	Getting items to have equal heights, positioning content centrally, aligning elements etc can be a pain.
	
	As such, Flexbox was introduced to solve the common issues and help with dynamic layouts. This helps for both desktop and mobile display.
	
	The syntax takes a short while to get a hang of and there's a few different attributes to learn, but it's a very useful tool for developers. 
	
	
7.1 Setting Up A Flexbox

	The first step to this is to give a container a display value of flex.
	
	display: flex;
	
	Any children in the container are now flex items and have intelligent flex properties. 
	
	These flex items can automatically expand to fill the container space, both horizontally and vertically.
	
	These items can be customized further with a few lines of CSS. There's no need to worry about margins or overflowing elements.
	
	The container of the flex controls much of the flex behaviour, such as alignment, spacing and direction.
	
	
7.2 Axes

	The layout of flexbox uses two axes: the main axis and the cross axis.
	
	The main axis, which the flex items travel, and the cross axis, which is perpendicular to the main axis.
	
	These are used to effectively space elements in a way that is more tricky with traditional CSS.
	
	
7.3 Properties For Flexbox

	Within the properties of the flexbox container, a number of attributes can be used.
	

7.3.1 Flex Direction

	The flex-direction attribute establishes the main axis, which flex items will travel along.
	
	flex-direction: ;
	
	row - Displays horizontally, left to right. Default.
	
	row-reverse - Displays horizontally, right to left. 
	
	column - Displays vertically, top to bottom.
	
	column-reverse - Displays vertically, bottom to top.
	
	
7.3.2 Flex Wrap

	Having defined the direction, we can set how the flex items behave.
	
	The flex-wrap attribute defines if the flex items are forced into a single line or are allowed multiple lines.
	
	flex-wrap: ;
	
	nowrap - Items do not wrap, one line only. Default.
	
	wrap - Items can wrap on multiple lines if necessary.
	
	wrap-reverse - Allows wrapping but in reverse order, so they will wrap onto an above row rather than a below row.
	
	
7.3.3 Shorthand

	The flex-flow attribute allows these attributes to be set in shorthand on the container.
	
	flex-flow: direction wrap;
	
	Replace direction and wrap with the relevant values.
	
	
7.4 Alignment

	Flexbox containers use the properties justify-content and align-items to handle the previously tricky task of alignment.
	
	
7.4.1 Justify Content

	The justify-content attribute defines how flex items are laid out on the main axis. 
	
	It essentially distributes the space around the flex items.
	
	justify-content: ;
	
	flex-start - Positions flex items around the begining of the flex container. Default.
	
	flex-end - Positions flex items at the end of the flexbox container.
	
	center - Positions flex items at the center of the flexbox container.
	
	space-between - Positions flex items with space between them onl.
	
	space-around - Positions flex items with space before, between and after them. 


7.4.2 Align Items

	The align-items attribute works similar to the justify-content property, except along the cross axis.
	
	This is how you vertically align elements.
	
	align-items: ;
	
	flex-start - Positions the items at the start of the flexbox container.
	
	flex-end - Positions the items at the end of the flexbox container.
	
	center - Positions items at the center of the flexbox container.
	
	baseline - Positions items along the baseline of their content.
	
	stretch - Stretches flex items to fit the container. Default.
	
	
7.5 Flex Attribute

	The flex items have some attributes of their own to consider.
	
	Chief amongst these is the flex attribute, which works by allowing the flex item to fill whatever space the container gives them.
	
	If all flex items have a flex of 1, they will have equal space. However if one of them has 2, then that one will get double the space compared to those with 1 etc.
	
	
7.6 Ordering Flex Items

	The order in which flex items appear can be changed.
	
	By default it's the order written in html. However the order attribute changes this.
	
	order: ;
	
	The value is a number. The lowest number is placed first etc. If more than one have the same value, it goes by the source code as to which comes first.

	Flex items with no set order will always go first.
	
	See the Flexbox Examples for guides on how to do all of this and the effects it has.
	
	
8 Semantic Web and Font

	Video: https://youtu.be/KLHrO29GPIM
	
	The internet wants to know about the web pages make. Search Engines look at your site using crawlers, for SEO and other purposes.
	
	Understanding how the semantic web works is important to modern web development. Understanding how search engines etc understand content and structure will be discussed here.
	
	We're also looking at fonts, text attributes and measurements. Because why not.
	
	Fonts are an essential component of a web page, and have a profound effect on how the page comes across to the user.
	
	
8.1 Semantic Tags

	We use divs loads during development. Usually content is placed in a div container and given a class or ID to explain it's purpose and style it.
	
	However, that class can be anything, and a robot won't know if "bar" means navigation, a section of a page or a container for some text about chocolate bars etc. They need clear semantics. 
	
	HTML5 introduced a bunch of semantic versions of a div, which can be used instead of this.
	
	This is great for two reasons. First, it makes the HTML5 structure easier to read and maintain. Second, it allows for crawlers to understand structure easily.

	These are the important semantic tags:
	
	<header> - Used for the header of the site.
	
	<nav> - Used for site navigation.
	
	<main> - Used for the "main" section of the page.
	
	<article> - Used to identify an article or text container etc.
	
	<section> - Used to identify a section of the page.
	
	<aside> - Used for a sidebar.
	
	<footer> - Used for the page footer.
	
	These don't add any styling or content changes, they are treated as normal divs. Semantic value for users and robots is the only benefit.
	
	Robots can now tell that the content within the <header> tag are part of the header for the site. This gives robots a very clear idea baout page structure and how content relates to each other.
	
	There's some others, some reqire more of a description.
	
	
8.1.1 Figure and Figcaption

	This is used to contain an image, alongside some text relevant to the image, such as an image title or description.
	
	The figure element contains both the image annd caption. The figcaption tag is then used as the container for the text.
	
	This can also be used for audio and video if the need arises. 
	
	Example:
	
	<figure>
		<img src="img/cat.jpg" alt="Cat"/>
		<figcaption>This is a cat.</figcaption>
	</figure>
	
	This gives robots crawling the site a very good idea of how the image and text is being used, and how they relate to one another. 
	
	It also makes it easier to read, with less classes and divs to keep track of. 
	
	
8.2 Fonts

	Fonts are very important to the look and feel of a page, and there's lots we can do with them.
	
	The key attribute here is font-family, which sets the family which text uses.
	
	font-family: lato, Verdana, sans-serif;
	
	The first font will be attempted. If the font isn't found, it will use the second. It is a good idea to have at least one backup font.
	
	There are a numbeur of common default fonts which browsers use. 
	
	A list of standard fonts can be found here: http://cssfontstack.com/oldsites/cssfontstack/?_ga=1.229589660.1402088432.1443468538
	
	We will come back to how to load custom fonts shortly.
	
	
8.2.1 Font Size

	The font-size attribute allows us to change the size of text in the browser. 
	
	font-size: 16px;
	
	The size can be given in px, % or ems.
	
	
8.2.2 Font Style

	The font-style property allows us to change the element's display.
	
	font-style: italic;
	
	Can be normal, italic or oblique.
	
	
8.2.3 Font Weight

	Controling the weight with the font-weight attribute allows us to add strength text.
	
	font-weight: bold;
	
	The weight can be lighter, normal, bold or balder.
	
	A number value can also be given, between 100 and 900.
	
	400 is the standard.
	
	
8.2.4 Color

	The color property sets the color which the text uses.
	
	color: #ffffff;
	
	Can be given by name (black,red etc), Hex or RGBA.
	
	 
8.3 Custom Fonts

	Default fonts are very generic and uninspiring. Whilst it is useful to have them as backup fonts, we can load custom fonts into the browser.
	
	There are multiple ways of doing this. 
	
8.3.1 Font Face

	The first way is using the font-face rule.
	
	Once reading the font-face within CSS, it instructs the browser to download the font from the given URL.
	
	This allows us to use much better fonts. 
	
	@font-face {
		font-family: "MyFont";
		src: url("fonts/myfont.woff2");
	}
	
	The value given in font-family will be the name we refer it to when assigning it after the font face.
	
	We also give the src, which is the location of the font file we are adding.
	
	We can comma seperate src url's, to give different font file types.
	
	Example;
	
	@font-face {
		font-family: 'NewFont';
		src: url('myfont.woff') format('woff'),
			 url('myfont.ttf') format('truetype');
	}

	body {
		font-family: 'NewFont';
	}
	
	
8.3.2 Link in HTML

	Font-face is all good, but it's a bit too complex to set up.
	
	We can instead use Google Fonts, which actually does font-face behind the scenes, to set fonts in the head of HTML.
	
	Google Fonts can be found here: https://fonts.google.com/
	
	This is easier and gives access to a large platform of fonts without requiring us to host them ourselves.
	
	When you find a font, copy and paste the given HTML link tag into the head of the page.
	
	Example
	
	<link href='//fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>

	<style>
		body {
			font-family: 'Open Sans', sans-serif;
		}
	</style>
	
	The font will then be downloaded with the page, and called when necessary with CSS.
	
	
8.4 Text Attributes

	Text attributes are different to font attribute as they deal more with alignment and indentation.
	
	Lets take a look at som text attributes.
	
	text-align: ; - This is used to align text within it's allowed space. Can be left, right and center.
	
	text-decoration: ; - This sets if there are any effects on the text. This can be none, underline or line-through.
	
	text-indent: ; - This sets how much you would like to indent the FIRST line of text from it's corner. Usually given in px, but can be % too.
	
	text-transform: ; - Will transform the case of the text. Can be none, capitalize (first letters), uppercase or lowercase.
	
	
8.5 Measurements

	CSS has too many ways to set the size of your text. 
	
	Luckily many of them are leftovers from the print world and aren't used on the web too much.
	
	There are two key types of measurement units that need to be considered. Relative Lengths, and absolute lengths.
	
	
8.5.1 Relative Lengths

	These units can change size according to the size of the screen it is viewed on.
	
	This is great for when the output media is of different sizing, from phones to desktop, and therefore has to scale in accordance with mobile design.
	
	Relevant Measurements:
	
	Percentages
	em
	rem
	
	
8.5.2 Absolute Lengths

	Unlike relative lengths, absolute lengths have a fixed size and do not scale or change for screen size. 
	
	Naturally this isn't great for mobile design, unless we wish to manually change it's size, which isn't ideal.
	
	The only common unit for this is px.
	
	It is ideally used when the format size is fixed.
	
	
8.5.3 Measurement Types Explained

	px - Pixel sizing uses raw pixel measurements to set a fixed sizing. 
	
	% - Percentages are always relative to the parent container. 
	
	em - Using em makes the sizing relative to the font size of the element itself.
	
	rem - Using root em sets the size relative to the root of the page. 
	
	
8.6 Responsive Font Sizing

	So what's the best way for using font sizes in responsive design?
	
	In practice, there's lots of debate about this. The simplest way to setup mobile fonts is like below.
	
	First, declare the root element, html, in pixels, and then use rem's to set up font sizing for the different elements.
	
	This is sufficient for most projects, though there are other ways this can be accomplished.
	
	Example:
	 
	html {
		font-size: 12px; /*declaring root element in pixels*/
	}
 
	h1 {
		font-size: 2rem; /*displayed at 24px*/
	}
 
	See the Font Examples for guides on how to accomplish all of what you're learned here. 
	
	
9 User Experience Design

	Video: https://youtu.be/osUxvQxoxwo
	
	As technologies advance, so does the complexity of the applications we use. 
	
	Web application and websites, which in the past have been static and bland, have evolved into interactive experiences. 
	
	However, no matter how the applications change over time, a website's success depends largely by how it's percieved by the user. 
	
	When a user accesses a website, they ask themselves three questions:
	
	- Does this website solve my problem?
	- Do I find it easy to use?
	- Do I find it pleasant to use?
	
	A website has to answer these three questions correctly in order to be successful.
	
	In this lesson we will focus on answering these questions fr the user.

	Outcomes:
	User Experience
	Users
	Usability and Visual Design
	
	
9.1 User Experience (UX)

	"After all, usability really just means making sure that something works well: that a person of average (or even below average) ability and experience can use the thing -whether it’s a web site, a fighter jet, or a revolving door- for its intended purpose without getting hopelessly frustrated."
	
	- Steve Krug
	
	Useful image for understanding UX - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/UXnewimage.png
	
	User Experience determines how a person feels when interacting with a system.
	
	The system could be a website, a web application etc. 
	
	Here's some good examples for UX.
	
	http://www.hongkiat.com/blog/ui-designer-portfolios/
	
	To achieve similar results, lets look deeper into what is involved and why it's important.
	
	No matter how complex a site it, a good UX is essential to encouraging users to keep interacting with us. 
	
	User Experience is built from dependent layers@
	
	Surface		Contrete
	Skeleton	^
	Structure	|
	Scope		^
	Strategy	Abstract
	
	Each layer validates the next, and work together to form a powerful UX.
	
	Lets go through each of these.
	
	
9.1.1 Surface

	The surface layer describes the finished visual design aspects. 
	
	This can be used effectively by using clean and consitent use of colors, fonts and images which all work to push a certain feel. 
	
	Image - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/surface.png
	
	
9.1.2 Skeleton

	The skeleton describes the screen layout and functional compartments in the screen. Basically the layout framework for the page.
	
	Good UX requires a clean layout which isn't cluttered, breaks up information and draws attention naturally during scroll.
	
	Note: The user naturally looks at the top left of a web page first.
	
	Image - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/skeleton.png
	
	
9.1.3 Structure

	Structure defines navigation from place to place in the user interface. 
	
	Think of it like the user journey, the expected travel the user will take from place to place. 
	
	A good structure has a clear progression and naturally pushes users from one step to the next. 
	
	Image - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/structure.png


9.1.4 Scope

	Scope is the tasks which the user can engage in whilst on the site.
	
	The tasks must be clear from the creation so each can be taken into consideration for the higher steps.
	
	Image - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/scope.png
	
	
9.1.5 Strategy

	Strategy consists of the business goals of the site and the relevant uses the site must entail.
	
	Good UX requires consideration of what it is the website is meant to achieve, so that users will convert. 
	
	Image - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/strategy.png
	
	
9.2 User Centered Design

	UCD refers to a class of methodologies where design decisions are based on some tangable user model.
	
	That user model must be based on the research of the users of the application.
	
	Rather than requiring users to adapt their attitudes and behaviors in order to learn and use a system, a system is designed to support user's existing beliefs.
	
	There are a few types of designers to be aware of.
	
	
9.2.1 UX Designer

	UX designers are primarily concerned with how the product feels.
	
	UX designers explore many different approach to solving a specific user problem. 
	
	The board responsibility of UX designers is to ensure the product logically flows from one step to the next.
	
	
9.2.2 UI Designer

	Unlike UX designers who are concerned with the overall feel, UI designers are more particular with how the product is laid out.
	
	They are in charge of designing each screen or page wto ensure that the UI visually communicates the path which the UX designer has laid out.
	
	For example, a UI designer creating an analtics dashboard might front load the most important info at the top. 
	
	UI designers are also typically responsible from creating a cohesive style guide and ensuring the consistent design language is applied. 
	
	Visual consistency falls under UI as well.
	
	
9.2.3 Graphic Designer

	Visual designers are less concerned with interaction or how pages link to each other, instead focusing on making it look pretty.
	
	This includes icons, colours and overall visual appearance.
	
	They often crave the small details and work to add visual quality to a site. 
	
	
9.3 Understanding Users

	Understanding users more, we can investigate them to try and figure out motives and needs.
	
	First we need to group them:
	
	Actor and Goal:
	
	Often a job title or common name for the type of user. i.e: Online Shopper
	
	User Role:
	
	A short name describing the goal of the user. i.e: casual browser - passes time browsing products etc.
	
	User Profile:
	
	Adding summary information about types of users, including the amount of users, the activites they will want to engage in, their computer skils and their experience with the subject matter.
	
	Persona:
	
	Choosing specific characteristics and compiling those into a description of that person. 
	
	
9.4 Personas

	Personas are based on research such as focus groups, observation, surveys etc. THey can e useful when personalising the target user.
	
	They are a representation of the target user which we use when designing.
	
	Personas:
	- Describe the user's behavior patterns.
	- Are represented as individuals.
	- Express and focus on major needs and expectations of the most important user groups. 
	- Give a clear picture of the user's expectations and how they're likely to use the site.
	- Aid in uncovering universal features and functionality.
	
	From the research, we can construct personas and a user story. This allows us to create the user exoerience of a very specific user. 
	
	Personas are focused, concise user models that we can use to base our decisions on. 
	
	Once we identify multiple groups, what seperates them etc, we can break them down into different personas.
	
	Things we can include:
	- Fictional Name
	- Demographics such as age, education, ethnicity.
	- Occupation, job title etc.
	- IT Experience
	- Experience with the subject matter.
	- Personality.
	- Goal/Task for going on our site. 
	- Frequency of use, how often are they likely to use the site?
	- Amount of Internet/Social Media Use.
	
	If we create a persona called Sarah, for instance, we can then ask ourselves some questions when designing the site.
	
	- What would Sarah think of this?
	- Are we meeting Sarah's goals?
	- Will this make it easier for Sarah to achieve her goals?
	- Does this application meet Sarah's aspiratons/expectations?
	
	How many personas are necessary depends on the site. 


9.5 Usability

	Usability refers to the ability of a specific type of user being able to carry out a task using a product.
	
	Usability is me asured through testing. There are a few main questions:
	
	- How many completed the task?
	- How quickly was the task completed, on average?
	- How many user errors are made whilst attempting to complete the task?
	
	There are evolving standards for interaction design. 
	
	10 Usability Heuristics:
	
	1. Visibility of system status
	The system should always keep users informed about what is going
	on, through appropriate feedback within reasonable time.
	
	2. Match between system and real world
	The system should speak the user's language. Words, phrases,
	concepts familiar to the user, rather than system oriented terms.
	Follow real world conventions, making information clear and in 
	order.
	
	3. User control and freedom
	Users often choose system functions by mistake, will need 
	"emergency exit" to leave unwanted states. Support undo/redo.
	
	4. Consistency and standards
	Users should not have to wonder if different words, situations,
	actions etc mean the same thing. Follow platform conventions.
	
	5. Error prevention
	Eliminate error-prone conditions, inform users with error 
	messaging etc.
	
	6. Recognition rather than recall
	Minimize the user's memory load. Make objects, actions etc 
	visable. Users should not have to remember too much. Instructions
	should be provided to help guide and educate use of the system.
	
	
	7. Flexibility and efficiency of use
	Accelerators – unseen by the novice user – may often speed up
	the interaction for the expert user such that the system can 
	cater to both inexperienced and experienced users. Allow users 
	to tailor frequent actions.
	
	8. Aesthetic and minimalist design
	Dialogues should not contain information which is irrelevent.
	Every element should have meaning as they each compete for 
	attention.
	
	9. Help users recognize, diagnose and recover from errors
	User errors should be dealt with effectively, notifying the user
	with what happened, how to fix it and why, to make continuing
	a quick and easy process.
	
	10. Help and documentation
	Whilst the best systems are likely not to need documentation to
	use, it may be necessary to provide help and docs which are easy
	to locate and search. List these by their expected frequency of
	need.
	
	Useful read in regards to this: http://designingwebinterfaces.com/explore
	
	
9.6 Prototyping

	Do not fall into the trap of coding early in the project. This can waste time and resources.
	
	Better to create a cheap wireframes of the site and it's elements to plan out it's UX, how it will appeal to personas, usability etc.
	
	Prototypes are quick to build, can show problems and better solutions, and better plan for upcoming building of the site. 
	
	It's also cheap and there are loads of tools to help with this.
	
	By prototyping a project, we can plan out the work, get an idea of how it will look, how it will meet UX, personas, usability etc and if there are any changes or additions needed etc.
	
	Sketching and wireframing are two great ways of doing this. 
	
	Examples of wireframes - http://www.wireframeshowcase.com/wireframes/detail/iplagg_webshop
	
	We'll discuss some great was to do this next. 
	
	
10 Balsamiq

	Video - https://youtu.be/GSNYJu8hRIk
	
	Balsamiq Mockups is a user interface design tool. It is used to create wireframes or mockups.
	
	We can use this to create sketches of product ideas, share them with team members and get feedback before actually coding anything.
	
	Here we will cover the basic overview of using the platform, it's features and controls.
	
	For further guides, use this link: https://docs.balsamiq.com/mybalsamiq/

	Outcomes:
	The basics
	Adding controls
	Image paper controls
	Completing the mockup
	Finishing touches


10.1 The Basics

	Some basic components of Balsamiq include:
	
	Toolbar - The primary control interface for common commands (copy, past and delete)
	
	Canvas - The grid where the drawing occurs.
	
	UI Library - Controls that can be dragged onto the Canvas at any time. 
	
	Navigator - Allows navigation to your other mockups through thumbmail images. 
	
	Property Inspector - Allows the configuration of properties and actions specific to each UI control (colour, size).
	
	Image Example - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/34-e1444898477283.png

	Use the biscuit example and Balsamiq docs for how to best utilize each of these.


11 Forms
	
	Video - https://youtu.be/-5EPuEVt-HU
	
	Firstly, nobody likes forms. But they are an important part of a website and it's users, so use of smart, attractive forms can greatly increase conversions.
	
	Here we will be looking into how best to build forms in HTML5 so that they are low hastle and make use of some great features such as autocomplete.
	
	Basically forms are at their best when you have to enter as little as possible. Lets look at how best to accomplish this.
	
	Outcomes:
	What is a Form?
	Input Types
	Other Form Tags
	Exploring input Attributes
	Numbers and Patterns
	Making Choices


11.1 Forms Explained

	HTML forms collect data from visitors to a website. There are many examples of this:
	
	-Shopping Carts
	-User Signup
	-Search Forms
	-Application Forms
	
	A basic form would be like the below.
	
	<form id="UserRegForm" action="server_side_script.php" method="post">
		Firstname:<input type="text" name="fname"/>
		Surname:<input type="text" name="sname"/>
		Email:<input type="text" name="email"/>
		<input type="submit" value="submit"/>
	</form>
	
	As you can see, we use the form tag as a container, and fill it with the input types and their relevant components, in this case some text.
	
	
11.2 Form Attributes

	There are many form inputs that help change how the form operates.
	

11.2.1 Form Tag

	action="" - This determines what happens when the form info is submitted. Usually a back end script will be the target of this.
	
	method="" - Determines how the action is performed. Either get or post. 
	
	Get is good for testing purposes, post should be used otherwise.
	
	
11.2.2 Input Tag

	type="" - Decides the type of input. Two examples are text, and submit. More are explained below.

	id="" - Not only for styling, but also allows us to access an element in the form. i.e; labelling
	
	value="" - Sets a default value. This is required for some inputs such as checkboxes.
	
	name="" - Used to name an input tag. This is passed with the form information to the server and is used as a reference for the field.
	
	placeholder="" - Places a temproary text value. Useful for describing the information. Disappears when clicked.
	
	autocomplete="" - Set this to "On" and it will allow the input to remember previously entered values.
	
	list="" - Used by text inputs to link the input to a datalist.
	
	required - Simply place this without any value and it will stop the form from submitting without input.
	
	autofocus - Place this in the input and it will make it focused on page load. 
	
	
11.3 Input Types

	Lets look at some input types. 
	
	<input type="type here" />
	
	"text" - A text field, capable of anticipating user text input. 
	
	"submit" - Creates a button which will submit the form.
	
	"email" - A text field designed for email syntax.
	
	"number" - Accepts a number input.
	
	"date" - Opens a calendar for a date to be entered. 
	
	"color" - Opens up a color selector.
	
	"password" - Textbox, but text is obscured for security.
	
	"url" - Allows for url input.
	
	"range" - Gives a range selector as the input.
	
	"checkbox" - Sets an individal checkbox. the value="" attribute is required, and all the checkboxes of the same group should have the same name.

	"radio" - Similar to checkboxes. Requires the value and name attributes. Only one allowed of each set.


11.4 More Form Tags

	By now we can make some cool forms. Lets go a step further with some more tags.
	
	<label> </label> - Rather than simply adding text as a label, we can use the semantic label tag. 
	for="" - Enter the ID value of the element it relates to.
	
	<fieldset>
		<!-- Set of related fields -->
	</fieldset>
	
	Fieldset is used to group together a bunch of related inputs. It adds a border to them by default.
	
	<legend> </legend> - Used within a fieldset to give it a title. 


11.5 Numbers and Patterns

	We have been able to create input restrictions with the required attribute as well as the email and url types.
	
	These restrict what can be inputted into the field and the syntax it must follow.
	
	We can restrict it further, as follows.
	
	min="" - With a number input, sets a minimum allowed value.
	
	max="" - With a number input, sets a maximum allowed value.
	
	This works particularly well with the range input type.
	
	
11.5.1 Pattern

	If we want to go further, we can restrict inputs to follow certain patterns, like below:
	
	<input type="text" pattern="[0-9][A-Z]" />
	
	The input must be a number between 0 and 9, then an uppercase letter between A and Z.
	
	i.e: 3C
	
	If we want three of the same value, we can do [a-z]{3} to set three lowercase letters as part of the pattern.
	
	For both upper and lowercase, do [A-Za-z] or whatever restriction you want.


11.6 Select Boxes

	Select boxes are very useful. They don't require an input tag to create.
	
	<label for="currency">Currency:</label>
	<select id="currency">
		<option value="euro">Euro</option> 
		<option value="dollar">Dollar</option>
		<option value="pound">Pound</option> 
		<option value="yen">Yen</option> 
		<option value="rupee">Rupee</option> 
		<option value="pesos">Pesos</option> 
		<option value="duckets">Duckets</option> 
		<option value="guilders">Guilders</option>   
	</select>

	As you can see, we use the <select> as a container which holds <option> tags.
	
	The <optgroup> tag can also be used to hold groups of options:
	
	<optgroup label="Popular">
		<option value="euro">Euro</option> 
		<option value="dollar">Dollar</option>
		<option value="pound">Pound</option> 
		<option value="yen">Yen</option> 
	</optgroup>
	
	The options are broken up into the label titles. 
	
	This then displays as a dropdown selector.
	
	
11.7 List and Datalist

	When we have a text field, we can set recommended values to appear whilst they are typing. 
	
	<input list="browsers" name="browser">
		<datalist id="browsers">
			<option value="Internet Explorer">
			<option value="Firefox">
			<option value="Chrome">
			<option value="Opera">
			<option value="Safari">
		</datalist>
		
	As you can see, the <datalist> tag contains options, the values of which will be the recommended options.
	
	The relevant input must use the list="" attribute which matches the ID attribute of the datalist tag.
	
	
11.8 Focus

	The :focus CSS selector is useful for editing how inputs react when they are currently selected.
	
	We can use it to style forms etc and make them look fancy when they are selected.
	
	Example:
	
	:focus{
      background-color: #FFECE9;
	}
		
	
11.9 Summary

	Importance of forms is often overlooked, but they are the most interactive part of a website in many cases.
	
	Particularly with the progression of HTML5, there has been big imporvements to input and design. 
	
	Making use of what's above will make forms much easier to make and fill in.


12 Bootstrap

	Video - https://youtu.be/j4SYPHLBiVo

	When it comes to design and layout, it can be time consuming and high maintenence.
	
	A solution to this is Twitter Bootstrap. This allows developers with no design background to make great looking websites in very little time.
	
	It's open source, which makes it great to extend with custom functionality and third party extensions.
	
	It's easy to use, saves time, is mobile first and has cross browser compatibility.
	
	Outcomes:
	What is Bootstrap?
	The grid system and Bootstrap layouts
	Bootstrap components


12.1 Bootstrap Setup

	Bootstrap can be downloaded from the following link: http://getBootstrap.com/getting-started/#download
	
	Click the "download bootstrap" to download, then extract to the relevant directory.
	
	This comes with CSS, Font and JS folders by default. These contain all Bootstrap files. 

	Files with .min are minimized files, and will load faster in browser.

	Pages using bootstrap need to have the following scripts:
	
	 <link href="bootstrap-3.3.7-dist/css/bootstrap.min.css" rel="stylesheet">
	 <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js" async></script>
	  
	 Jquery is needed in order to handle the JS files.


12.2 The Grid System

	The most important concept in Bootstrap is how it defines layout. This is done using the grid system.
	
	The system divides the web page into rows, each row containing a number of columns. 
	
	These columns will contain content for page, such as text, images and navigation. 
	
	Rows are stacked one on top of another, similar to the image below:
	
	http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/49.png
	
	Rows are comprised of 12 columns, and the elements in that row can take up as many of these as needed.
	
	12 is the maximum as that is the number used to measure the page. The sums of the row MUST equal 12.
	
	i.e: An element with full width will have a column value of 12. Half would be 6.
	
	An example layout: http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/58.png
	
	
12.3 Implementing Grids

	In practice, you place rows inside a .container class. Each row then has a .row class.
	
	The columns then have a .col-sm-x class, with x being the column value.
	
	So full width would be .col-sm-12
	
	"col" - The element is a column
	"sm" - This is the screen size, in this case "small." We'll cover this further next.
	
	The bootstrap css files handle the heavy lifting for this.. 
	
	Example:
	
	<div class="container">
		<div class="row">
			<div class="col-sm-4">
				<!-- Content -->
			</div>
			<div class="col-sm-4">
				<!-- Content -->
			</div>
			<div class="col-sm-4">
				<!-- Content -->
			</div>
		</div>
	</div>
	
	As you can see, the column values equal 12, filling the row.
	

12.3.1 Offsetting Columns

	Offsetting is done using the following:
	
	col-xx-offset-*
	
	the xx is sm or whatever the correct equivilent is.
	
	the * is the number of columns to move it over. 
	
	So to center a 4 column element:
	
	<div class="row">
		<div class="col-md-4 col-md-offset-4">.col-md-4 .col-md-offset-4</div>
	</div>


12.4 Bootstrap Components

	Now that we understand layout, lets examine it's components. This includes buttons, lists and badges.
	
	Bootstrap comes with some cool default elements which make developing them much easier.

	
12.4.1 Bootstrap Buttons

	Bootstrap makes developing buttons easy.
	
	It's best to apply the bootstrap buttons to either the a, button or input tags.
	
	They are made like the below:
	
	<a href="#" class="btn btn-success">Learn</a>
	
	"btn" - Conveys it's a button.
	
	"btn-success" - Styles the button to a particular predefined style class.
	
	Here are all the styles available - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/138.png
	
	And also sizing - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/buttonclasssizes.png
	
	Example:
	
	<a href="#" class="btn btn-success">Success</a>
	<a href="#" class="btn btn-primary">Primary</a>
	<a href="#" class="btn btn-danger">Danger</a>


12.4.2 Bootstrap Lists

	Similar to buttons, lists in Boostrap are straightforward and gives access to layout classes.

	Boostrap also inclues glyphs and badgets that add extra dimenson to lists and other elements.

	Add a .list-group class to the ul, and then a .list-group-item class to the individual list items. This gives them a funky list design.

	Example:

	<ul class="list-group">
		<li class="list-group-item">Item 1</li>
		<li class="list-group-item">Item 2</li>
		<li class="list-group-item">Item 3</li>
	</ul>

	Bootstrap also comes with some funky icons. A full list of them here: http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/186.png
	
	To make them appear inlne, use the span tag and ass the .glyphicon class followed by the relevant icon class.

	Example:
	
	<ul class="list-group">
    <li class="list-group-item">
	<span class="glyphicon glyphicon-star-empty"></span> Stars
    </li>
    <li class="list-group-item active">
        <span class="glyphicon glyphicon-music"></span> Songs
    </li>
    <li class="list-group-item">
        <span class="glyphicon glyphicon-camera"></span> Photos
    </li>
    <li class="list-group-item ">
		<span class="glyphicon glyphicon-comment"></span> Comments
    </li>
	</ul>

	Remember to leave a space between the span and the text, if text is needed.
	
	
12.4.3 Badges

	Badges allow numerical information to be associated with a link.
	
	To do this, replace the li tags in your list with a tags instead. 
	
	Gives the a tags a href of #.
	
	<ul class="list-group">
    <a href="#" class="list-group-item">
        <span class="glyphicon glyphicon-star-empty"></span> Stars
    </a>
	</ul>

	Now all we need to do is add the badge. We do this with a second span, with a badge class.
	
	Example:
	
	<ul class="list-group">
		<a href="#" class="list-group-item">
			<span class="glyphicon glyphicon-star"></span> Stars
			<span class="badge">145</span>
		</a>
	</ul>

	The numerical value will then be displayed within the badge.

	We can make the badges functional with dynamic values using angular.js, which will be shown later.
	
	Additional Boostrap knowledge: https://scotch.io/bar-talk/bootstrap-3-tips-and-tricks-you-might-not-know


13 Bootstrap Nav Elements

	Video - https://youtu.be/jwU5W8koLs4
	
	In the previous lesson, we learned a lot about Twitter Bootstrap.
	
	However there's plenty of other things Bootstrap can do.
	
	In this nesson we will learn about the Bootstrap navbar. We will also learn about Bootstrap menus.
	
	Outcomes:
	Navigation
	Tabs and Pills
	Bootstrap Components
	Creating an Accordion panel


13.1 Navigation

	In the previous lessons, we have learned how important navigation, and specifically a navbar, is for a site.
	
	Bootstrap navbars are resposive and can extend and collapse.
	
	They are made using the .navbar class on the container, preferably on the nav tag for semantic layout.
	
	<div class="container">
		<nav class="navbar navbar-default">
			...
		</nav>
	</div>
	
	Now we need to add elements inside of the navbar. 
	
	Firstly we can add a brand to the header. First, create a div with the .navbar-header class, then place an a tag inside with a .navbar-brand class.
	
	<div class="container">
		<nav class="navbar navbar-default">
			<div class="navbar-header">
				<a class="navbar-brand" href="#">TITLE</a>
			</div>
		</nav>
	</div>

	If we want to change the colour of the navbar, we can use the .navbar-inverse class instead of .navbar-default.
	
	But what about the nav items themselves?
	
	First we need a ul tag, with .nav and .navbar-nav classes. Then add the list items using li and a tags. 
	
	To align the list items right, also add the .navbar-right tag to the ul element.
	
	<nav class="container">
		<div class="navbar-header">
			<a class="navbar-brand" href="#">Front End Tutorial</a>
		</div> 
		<ul class ="nav navbar-nav navbar-right">
			<li><a href="#">Home</a></li>
			<li><a href="#">Contact Us</a></li>
		</ul>
	</nav>
	
	If we want the navigation to be fixed to the top of the page, add the .navbar-fixed-top class to the nav element. 
	
	There's also .navbar-fixed-bottom in case it's needed.
	
	
13.2 Tabs and Pills

	Besides the navbar, there are two other nav components that are often used for navigation.
	
	These are called tabs and pills.
	
	Generally these compenents are within page content and aren't used as main navigation for the site.
	
	
13.2.1 Tabs

	Tabs are used to display large amounts of content in a small area, without having to leave the page.
	
	The user can switch between the tab panes to access the content, where each tab can only be viewed one at a time.
	
	Here's an example of how this is done:
	
	<nav>
		<ul class="nav nav-tabs">
			<li><a href="#">Home</a></li>
			<li><a href="#">About</a></li>
			<li class="active"><a href="#">Portfolio</a></li>
			<li><a href="#">Contact</a></li>
		</ul>
	</nav>
	
	
13.2.2 Pills

	Tabs can be turned into pills, they do not have 3d effects, instead using rounded borders.
	
	Just use the .nav-pills class instead of .nav-tabs.
	
	<nav>
		<ul class="nav nav-pills">
			<li><a href="#">Home</a></li>
			<li><a href="#">About</a></li>
			<li class="active"><a href="#">Portfolio</a></li>
			<li><a href="#">Contact</a></li>
		</ul>
	</nav>
	
	
13.2.3 Nav Width

	Tabs and Pills can be displayed and positioned differently, as seen below.
	
	The most useful of which, you can allow them to take up their parents containers using .nav-justified.
	
	This is done using the .nav-justified class on the ul.
	
	
13.3 Bootstrap Components

	Bootstrap contains a number of components to help add useful functionality to a website.
	
	These can be reviewed here - http://getbootstrap.com/components/
	
	A number of these components introduce some dynamic JS content. As such, the bootstrap Javascript file must be linked.
	
	
13.4 Accordion Panels

	Accordions are common in web design. It allows a list of titles which expand to reveal more details when the title is clicked. 
	
	Generally only accordion tab is open at one time. 
	
	
