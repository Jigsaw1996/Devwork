Front End Development Guide

	I will be using this document to note down everything that I have been learning in order to complete my Front End Developer Course. 
	
	OTHER RELEVENT DOCUMENTS
	HTML GUIDE
	CSS GUIDE
	JAVASCRIPT GUIDE
	
	GIT GUIDE

	
Contents

	1 Reopening the Box Model
		1.1 HTML Refresh
		1.2 Coding In An Editor
		1.3 The Box Model
		1.4 Border and Border Radius
	
	2 Reopening The Box Model 2
		2.1 Display Properties
		2.2 Centering Elements
		2.3 A Walk Through
		2.4 Shorthand
		2.5 Validator
		
	3 Positioning and CSS
		3.1 CSS3 Border Box
		3.2 Vendor Prefixes
		3.3 Positioning and Flow
			3.3.1 Static
			3.3.2 Relative
			3.3.3 Absolute
			3.3.4 Fixed
		3.4 Further Absolute Positioning
		3.5 The Developer Tools
		3.6 Fixed Positioning
		3.7 Types of Stylesheet
			3.7.1 Internal Stylesheets
			3.7.2 External Stylesheets
			3.7.3 Inline Styles
		3.8 The Cascade
			3.8.1 Style Priority
		3.9 Summary
		
	4 Media
		4.1 The img Tag
			4.1.1 Positioning Images
			4.1.2 Floating Images
		4.2 Background Image
		4.3 CSS Filters
		4.4 HTML Video
			4.4.1 Video Attributes
			4.4.2 Media Fragments
		4.5 HTML Audio
			4.5.1 Audio Attributes
			
	5 Gradients, Transforms and Transitions
		5.1 Gradients
			5.1.1 Linear Gradients
			5.1.2 Multiple Color Stop Gradients
			5.1.3 Transparency with RGBA
			5.1.4 Radial Gradients
		5.2 Transformations
			5.2.1 Rotate
			5.2.2 Scale
			5.2.3 Skew
			5.2.4 Translate
		5.3 3D Transformations
			5.3.1 3D Rotate
			5.3.2 3D Translate
			5.3.3. Perspective
			

1 Reopening the Box Model

	Video https://youtu.be/th_A4a6vPm0
	
	Here we will look into how web pages are structures and achieve an effective and clear design. 
	
	
1.1 HTML Refresh

	HTML stands for Hypertext Markup Language.
	
	The extention is .html
	
	It's used to provide structure and content to electronic documents, typically viewed in web browsers. 
	
	I've covered all this before and can all be viewed in the HTML guide, but lets have a short refresh. 

	A typical HTML Document
	
	<!DOCTYPE html>
	<html>
		<head>
			<title>Page Title</title>
		</head>
		<body>
			<h1>My Page</h1>
			<p>A paragraph</p>
			
	MOZILLA HAVE KINDLY PROVIDED AN ENTIRE LIST OF HTML ELEMENTS.

	https://developer.mozilla.org/en-US/docs/Web/HTML/Element
	
	OTHERWISE USE THE HTML DOCUMENT I MADE, THAT'S WHAT IT'S THERE FOR. 
	
	
1.2 Coding In An Editor

	The most popular editor at the moment is Sublime Text. 
	
	Download link here - http://www.sublimetext.com/3
	
	A few notes on files -
	- Don't save files with spaces.
	- Remember to keep git updated with changes. 
	- Sublime has a view in browser option on right click. Use it.
	
	
1.3 The Box Model

	Web Pages are comprised of HTML and CSS elements. Positioning these elements on a web page allows you to have complete control over how the page looks.
	
	Here we will look at how to control layout. 
	
	When discussing web design and layout, the "Box Model" os the collective term that is used to describe how elements are spaced on the page.
	
	The box model of an element works like the below. 
	
	Content Area
	Padding
	Border
	Margin
	=
	Total Width
	
	The Total Width is equal to all of the above factors, on both sides.
	
	See the box model example to see how this works. 

	
1.4 Border and Border Radius

	There are a number of border styles, as seen below:
	solid
	dashed
	dotted
	double
	groove
	ridge
	inset
	outset
	
	This can be individually set using the border-style: ; property. 
	

	Border Radius is a new CSS3 property. It gives rounded corners to a border without use of an image. 
	
	It works using the border-radius property. 
	
	border-radius: ;
	
	A circle is equal to the height/width, or 50% if working with percentages.

	
	It can be written with individual values for each corner. 
	
	For example: 
	
	border-radius: top-left top-right bottom-right bottom-left;
	
	Each corner can also have a different radius for either side, done using a / as seen below.
	
	border-radius: 120px/30px

	This gives both sides different values. 
	
	See the border radius examples for how this is done.
	
	
2 Reopening The Box Model

	Video - https://youtu.be/M3aq4tQvAOs

	Following on from the previous lesson, having the ability to control layout is highly dependent on the display property. 
	
	In this lesson we will discuss how you can apply different display properties to achieve various results. 
	
	We will also cover shorthand syntax. 
	
	
2.1 Display Properties

	For the purpose of CSS styling, elements can be divided into a few different categories. 
	
	Each element has it's own default display, but this can be manually changed in CSS to impact display. 
	
	The display types are below:
	Block - These elements take up the full width if it's line. Examples: <p> <h1> <div>
	Inline - These elements only take up the room they need to, and can sit alongside one another. Examples: <strong> <a> <span>
	Inline-block - This is a mix of the previous 2. Will sit alongside other element, but will accept height and width editing. Examples: <img>
	None - Item doesn't appear at all, taking up no room. 
	
	
2.2 Centering Elements

	To center inline elements within it's container, do the below. 
	
	text-align: center;
	
	To center block elements within it's container, the left and right margins have to be set to auto, so that the browser will automatically set them equally.
	
	margin: 0 auto;
	
	
2.3 A Walk Through

	Lets put these lessons into practice by demonstating how to make the following layout.
	
	http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/walkthru1-1-e1456941630446.png
	
	We make this by using inline-blocks for adjascent containers. 
	
	However this has it's issues. inline-block elements have natural spacing which can add to total widths etc, due to them typically being used for text.
	
	To solve this, we need to remove the white space. This is done by setting the font size of the parent container to 0. The children can then be given the font size.
	
	However this only works with px or % amounts. This doesn't work with ems. There are workarounds for this however. See here: https://davidwalsh.name/remove-whitespace-inline-block
	
	In any case, the example uses the following to create layouts:
	
	display: ;
	float: ;
	width: ; 
	height: ; - Left blank in some cases so that it will fit it's children.
	padding: ;
	margin: ;
	
	See the "Inline Block Positioning" example for how this is done.
	
	
2.4 Shorthand

	As already shown in the examples, we can write out padding, border and margin properties in a number of ways. 
	
	Longhand:
	margin-top: 20px;
	margin-right: 20px;
	margin-bottom: 20px;
	margin-left: 20px
	
	Simple Shorthand:
	margin: 20px;
	
	Ideal Shorthand:
	margin: 20px 20px 20px 20px;
	
	Similarly with borders:
	border-size: ;
	border-style: ;
	border-color: ;
	
	The last is ideal as it allows editing for each four corners seperately and makes it easy to come back to and edit. 
	
	Get into the habit of doing this. 
	
	Syntax:
	
	padding: top right bottom left;
	
	border: size type color;
	
	margin: top right bottom left;
	
	
2.5 Validator

	If you are looking to validate your code to make sure it is best practice and without any errors, use W3C.
	
	https://validator.w3.org

	Everyone prefers code that runs properly and without any annoying issues. 
	
	
3 Positioning and CSS

	Video: https://youtu.be/YT3UhoYL3B8

	In this lesson we peel back some CSS layers and see how it works. 

	We will look at the importance of positioning and flow in a document. 
	
	We will also reopen the Box Mode yet again and explore better ways of dealing with widths. 
	
	Includes:
	CSS3 Border-Box
	Position and Flow
	Absolute Positioning
	Developer Tools
	Fixed Positioning
	Cascading
	
	
3.1 CSS3 Border Box

	The last time we looked at the Box Model, we noted some of the difficulties involved in layout out a web page, including the maths.
	
	But what if you hate the maths? 1st World Problems right there.
	
	If you're lazy, CSS3 has border-box to make the maths easy. 
	
	Normal Full width:
	left margin + left border + left padding + content + right padding + right border + right margin = Full Width
	
	border-box Full Width:
	left margin + content + right margin = Full Width
	
	What this means is that you no longer have to worry about padding and border widths. 
	
	Border and padding are instead handled within the content width. 
	
	Syntax:
	
	box-sizing: border-box;
	
	The padding and border are contained as part of the content spacing. 
	
	
3.2 Vendor Prefixes

	Vendor Prefixes are a useful when it comes to elements not in full support yet.
	
	The CSS3 Spec is not fully signed off, so the browsers implement the features in their own way using prefixes until the entire spec is complete.
	
	This means that not all browsers fully support all tags.
	
	In time prefixes will disappear, but for now the newest tags need vendor prefixes. 
	
	Use the following site to see compatibility for tags: http://caniuse.com/
	
	See the CSS Guide for more info.
	
	These are the Vendor Prefixes. 
	
	Chrome, Safari, Newer Opera, Android  = -webkit-
	Firefox = -moz-
	Internet Explorer, Windows Edge = -ms-
	Older Opera = -Opera-
	

3.3 Positioning and Flow

	CSS allows us to position content on pages whichever way we want. This is one of CSS's key uses.
	
	We are going to continue using inline-blocks for most layout purposes and then look at flexboxes.

	An HTML page has flow, this is how elements know where they are to be positioned. Elements can position themselves in certain ways that go with or break the flow.
	
	Elements with flow interact with one another, either making space to be stacked above/below, or next to one another. 
	
	There are several position types which define the flow.
	
	Position Types
	
	Static
	Relative
	Absolute
	Fixed
	
	
3.3.1 Static

	Static is the default positioning of an element, where everything is stacked on top of one another. Everything flows down the page.
	
	This is what you're used to, unless explicitly changed. 
	
	
3.3.2 Relative

	Relative positioning maintains flow, taking the static position but allows us to offset the element in a certain direction. 
	
	For instance, we can set the element 100px to the left, and 10px the top, from it's original position.
	
	NOTE: IT STILL LEAVES SPACE WHERE THE ELEMENT WAS ORIGINALLY, THEREFORE NOT BREAKING THE FLOW OF THE PAGE.
	
	Moving elements can make them overlap. Use z-index: ; to set position. The highest number is displayed on top.
	
	Relative positioning is important as it interacts with absolute positioning.
	
	
3.3.3 Absolute

	Absolute positioning breaks the flow of the page. 
	
	The space which would normally be given to the element in the flow is instead occupied by the next in-flow item. It is positioned freely from an absolute position.
	
	Similar to relative positioning, they can be moved around, only they are moved from the top left of their parent element, providing it uses relative positioning. 
	
	If absolute elements are set without the parent being relative, it will set them in relation to the body instead, or the next higher non-static element. 
	
	Positioning the parent as a relative makes absolutes treat it as the container, because of it's non-fixed status.
	
	This gives a meaningful relationship between absolute children and their relative parents. 
	
	Moving elements can make them overlap. Use z-index: ; to set position. The highest number is displayed on top.
	
	
3.3.4 Fixed

	Fixed elements break the flow completely, not paying any attention to it. 
	
	The element will be fixed on the screen, not moving if scrolled etc. 
	
	They can be moved across the screen, relative to the top left corner of the user's screen. 
	
	Moving elements can make them overlap. Use z-index: ; to set position. The highest number is displayed on top.
	
	If no z-index is set, the element set last in the HTML will be displayed on top. 
	
	
3.4 Further Absolute Positioning
	
	Continuing with border-box related stuff, lets take a further look at absolute positioning. 
	
	See the Absolute Positioning tutorial for an example of how we can use absolute positioning to move an element around the page.

	This also shows amn example of using a relative parent, otherwise the item would move around from the body tag, not it's container like we want.
	
	This allows us to easily set the element's position.
	
	
3.5 The Developer Tools

	Most browsers have what are known as Developer Tools. These are really useful tools that allow us further inspection of web pages and their elements. 
	
	It also allows us to edit a page from our browser to see the effects etc.
	
	Press Ctrl + Shift + I to open this up for both Chrome and Firefox. 
	
	Pressing Ctrl + U opens up the page source itself. 
	
	
3.6 Fixed Positioning

	Lets go further with Fixed positioning. 
	
	In the Tutorials, new functionality has been added. At the bottom right of each page, there is now a link containing an image, which will allow users to scroll back to the top.
	
	It has been given position: fixed; and placed using bottom: ; and right: ;
	
	Be aware of overlapping positioning and use the z-index where necessary. 
	
	Because the elements are positioned last on HTML, they are automatically displayed on top. As no custom z-index has yet been set, it will automaically display over all other elements. 
	
	This highlights why you should watch where you place elements in HTML so that they benefit this. 
	
	
3.7 Types of Stylesheet

	CSS stands for cascading stylesheets. The cascade refers to how stylesheets all cascade together to form a single stylesheet in the end. 
	
	There are multiple ways stylesheets can be displayed. 
	
	
3.7.1 Internal Stylesheets

	These are located in the head of a HTML document, within the <style> tags. 
	
	These styles are specific to the page in question. 
	
	Example:
	
	<head>
		<style>
			p {
			color: red;
			}
		</style>
	</head>
	
	
3.7.2 External Stylesheets

	External Stylesheets are located externally to the HTML document, linked in the head of the html document. 
	
	External Stylesheets use the .css extention, and can be linked to as many pages as required. Multiple Stylesheets can be linked to, and they will all be added into one cascading stylesheet.
	
	It will read the first linked Stylesheet first, then the next, overriding any of the first Stylesheet's styles if there is overlap. 
	
	Example:
	
	<head>
		<link rel="stylesheet" href="style.css"></link>
	</head>
	
	External Stylesheets are the best to use as they can be linked on multiple pages and they completely seperate styling and content. 
	
	
3.7.3 Inline Styles

	Don't do this. 
	
	Inline styles uses the style="" attribute to style a HTML element. 
	
	This ruins the purpose of CSS, which is to seperte style from content. 
	
	As such don't bother with this. 
	
	Example:
	
	<p style="color: red;">Lorem Ipsum</p>
	
	
3.8 The Cascade

	When Stylesheets are read, it's likely there will be overlap of styles.
	
	For example, in an external Stylesheet, you might get this.
	
	p {
		color: blue;
	}
	
	But an internal Stylesheet may then say this.
	
	p {
		color: red;
	}
	
	Which does it use? 
	
	It'd be red, and here's why. 
	
3.8.1 Style Priority
	
	One of the governing principles behind CSS is that the browser loads the last as priority. 
	
	The browser loads stylesheets in this order:
	
	1. External Stylesheets
	2. Internal Stylesheets
	3. Inline Styles
	
	As a result, if each of the three offer conflicting styles, the inline style would be used as it's loaded last, overriding the previous ones. 
	
	Similarly when reading individual Stylesheets, it reads from top to bottom, so lower styles have priority. 
	
	UNLESS the style is more specific. 
	
	Specificity is another important aspect. The more specific, the higher the priority. 
	
	Below is the specificity order:
	
	1. ID's have highest priority, as they are unique. 
	2. Classes are next as they are more specifically named than elements. 
	3. Elements then come last, as they aren't as specific. 
	
	To explain further. 
	
	Example:
	
	p {
		color: purple;
	}
	
	#red {
		color: red;
	}
	
	.blue {
		color: blue;
	}
	
	What colour would a paragraph with an id of "red" and a class of "blue" be? 
	
	It'd be red, because id's have a higher priority than classes and elements. 
	
	It's best practice to start each stylesheet with the least specific options then work your way down to more specific styling. This is easier to read and maintain.
	
	
3.9 Summary

	The ability of CSS to polition elements and content on a web-page in almost any way imaginable is one of it'ss primary assets. 
	
	Taking what has been learned about the box model and positioning, means we are on our way to becoming web designers. 
	
	Understanding positioning is key to mastering web page layouts. 
	
	
4 Media

	Video: https://youtu.be/wbEy2C2cJAo
	
	HTML5 introduces both audio and video support. 
	
	CSS3 also comes with some cool new image related editing.
	
	In this section we will learn a bit more about how to use Media related content. 
	
	Includes:
	Using the img tag
	Media filters
	Embedding video
	Embedding audio
	
	
4.1 The img Tag

	We have already seen  how the <img> tag is used to represent images in HTML.
	
	<img src="image.png" alt="alt txt" />
	
	Firstly there are several image formats supported.
	
	These include:
	jpeg
	png
	svg
	gif
	
	Lets look further into best practices for images. 
	
	An image must always have an alt attribute, to give some information on the image inc ase it cannot load, and is also useful for SEO etc. 
	
	It's also desirable to include a width and height attribute so that, when the image loads, there is already a space in the flow of the document for the image.
	
	This solves possible display issues with large images. 
	
	Please see the "Image Positioning Example" document for examples for all positioning types. 
	
	
4.1.1 Positioning Images

	The img tag is, by default, an inline-block element. So it will sit alongside other elements such as text.
	
	However, this will not always be visually ideal. 
	
	As such, it's useful to set images to display as a block element unless specifically required otherwise. 
	
	display: block;
	
	
4.1.2 Floating Images

	Now this is where floating comes in. 
	
	Floating allows for two or more elements in the same container to wrap around one another by floating one of them. In this case, an image and some text.
	
	Floating moves an item to the left or right of the container. Any unfloated elements in the container will move up to fill the available space.
	
	img {
		float: left;
	}
	
	Unlike either block or inline-block, the elements will naturally wrap around next to each other, creating a much more natural appearance.
	
	Using margin is particularly important when doing this, so that there is space between the text and the floated image.
	
	Floating was originally designed to solve the issue of text on images, though it is often used for positioning. We won't find that in this course, we have something much more interesting. 
	

4.2 Background Image

	Background images can be used to add images as a form of backdrop to an element. 
	
	This is done using the background-image attribute. 
	
	background-image: url(link);

	Multiple backgrounds can be added by comma seperating them. Overlapping background images will display the first declared on top. 
	
	The background-size attribute can be used to set what it's size is. 
	
	background-size: cover/contain/100px 100px;
	
	Cover - Will make the background image cover the element, and the aspect ratio will be maintained. 
	Contain - Will fit the element exactly, though this may cause sizing issues. 
	
	ASPECT RATIO IS THE RATIO OF THE WIDTH TO THE HEIGHT OF AN IMAGE
	
	There are also some other attributes, such as background-repeat and background-position. 
	
	Lastly background-attachment will set how the image reacts to scrolling. Setting this to fixed will create a paralax.
	
	See the CSS Guide for more info on these.
	
	
4.3 CSS Filters

	CSS Filters are applied to basic HTML elements, such as image and video. 
	
	They are made using the filter: ; attribute. 
	
	REMEMBER to use the webkit prefix for support on chrome.
	
	The attribute allows for basic editing of their display etc, such as images.
	
	Here are the options below:
	
	filter: greyscale(1); 
	
	filter: blur(5px);
	
	filter: sepia(1);
	
	filter: hue-rotate(279deg);
	
	filter: saturate(.9);
	
	filter: opacity(.5);
	
	filter: brightness(.9);
	
	filter: contrast(1);
	
	Most filters go between 0 and 1, with values inbetween. 1 is always max, 0 is minimum. 
	
	Multiple filters can be added to an element by putting a space between them.
	
	To overide filters on an element. Use the below:
	
	original: unfiltered;
	
	Please look at the Filter Example for tutorials on how to do these. 
	
	
4.4 HTML Video

	HTML5 introduced the video tag, which embeds a video player into the page.
	
	Previously it was impossible to embed video into a web page without third party plugin players such as Flash, Silverlight or QuickTime.
	
	There's still no single agreed video codec for HTML5. Different browsers support different formats.
	
	These are the most commonly supported video formats:
	
	.mp4
	.ogv
	.webm
	
	The video tag is used as seen below.
	
	<video controls="controls">
		<source src="video/Rabbit_MP4.mp4" type="video/mp4" />
	</video>
	
	The source tag specifies the video to be loaded for the tag. 
	
	Multiple source tags can be used. The browser will try the first one and, if it cannot load it, will try the next.
	
	As such it is good to provide multiple formats of the video, so that all browsers will be able to run it.
	
	The source tag also has the type attribute. This will make the browser not try to load any unsupported video at all, which saves load times.
	
	THE CONTROLS ATTRIBUTE IS MANDATORY. 
	
	Supported Formats for each browser - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/unit-4-20.png
	
	
4.4.1 Video Attributes

	As well as standard attributes similar to images, such as width and height, the video tag has some specific attributes.
	
	preload="none/metadata/auto" - Sets if it should preload the video or not.
	
	poster="img/jazz.jpg" - Sets an image as a placeholder before the user hits play. 
	
	autoplay - Placing this in the video tag means the video will play automatically upon page load.
	
	
4.4.2 Media Fragments

	What if you want the video to start playing from 10 seconds in?
	
	This is done by adding the below to the end of the video URL.
	
	#t=10
	
	An end time can also be added using comma seperation.
	
	#t=10,25
	
	EXAMPLE
	
	<source src="video/catvid.mp4#t=20,30" type="video/mp4" />


4.5 HTML Audio

	Similar to the video tag, HTML5 introduced an audio tag for embeding audio into the page. 
	
	Try to get one of the below formats to ensure support for all browsers:
	.mp3
	.ogg
	
	Audio is embedded as seen below.
	
	<audio controls="controls">
		<source src="celiband.mp3" type="audio/mpeg; codecs=mp3" />
		<source src="celiband.ogg" type="audio/ogg; codecs=vorbis" />
	</audio>
	
	Just like with the video tag, the audio tag contains sources. The browser will try the top first, then the second till it finds a supported version.
	
	The type attribute specifies the audio format for that video, so that the browser only attempts to load supported formats.
	
	The type attribute uses the codects selector. As seen in the first one, if the browser supports mpeg but not the specified codecs, the audio will not load.
	
	Supported formats for each browser - http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/unit-4-20.png
	
4.5.1 Audio Attributes

	Similar to the video tag, the audio tag has some specific attributes.
	
	preload="none/metadata/auto" - Specifies if the audio is preloaded into the browser or not, or simply it's metadata.
	
	autoplay="autoplay" - Will play the audio as soon as it loads.
	
	loop="loop" - Will make the audio loop upon ending.
	
	See the Audio and Video Example for help with both of these.
	

5 Gradients, Transforms and Transitions

	Video: https://youtu.be/Y-Z1l6WnGqI
	
	In this section, we will be looking into how to create gradients, transformations and transitions.
	
	Gradients in particular used to be a pain, but now have direct support in CSS3.
	
	Includes:
	Gradients
	Transforms
	Transitions
	
	
5.1 Gradients

	CSS3 gives us the ability to add gradients to backgrounds and buttons.
	
	This is done using the backgroun attribute.
	
5.1.1 Linear Gradients

	Linear gradients work by having two colors which change in a certain direction over the background.
	
	background: linear-gradient(to [direction], [first color], [second color]);
	
	The direction can be top, bottom, left or right. It can also be a degree value.
	
	EXAMPLE
	
	background: linear-gradient(to left, #FF4E50, #F9D423)
	
	
5.1.2 Multiple Color Stop Gradients

	Linear Gradients can also be used to create color stops.
	
	These allow for many colors, with set points for when they shoul begin and end.
	
	background: linear-gradient(to [direction], [first color] [first color stop], [second color] [second color stop])
	
	The color stop is the percentage in the given direction where that color should stop.
	
	EXAMPLE
	
	background: linear-gradient(to right, #FFED21 1%, #FF2A06 50%, #9412FF 100%);
	
	
5.1.3 Transparency with RGBA

	It's not possible to control transparency with HEX.
	
	We can instead use rgba to do this.
	
	RGBA has four values. Red, Green, Blue and transparency, 
	
	The colour options run up to 255. Transparency is between 0 and 1.
	
	rgba(255,0,0,1) - Fully visible red.
	rgba(255,0,0,9) - Invisible red.
	
	But how do we use this with gradients?
	
	By placing the RGBA within brackets in the relevant place. 
	
	EXAMPLE
	
	background: linear-gradient(-45deg, rgba(0,0,0,0), #ff0000);
	
	
5.1.4 Radial Gradients

	Radial gradients is a gradient from a single point, rather than across the background.
	
	This is done using radial-gradient instead of linear-gradient. 
	
	background: radial-gradient([first color], [second color]);
	
	The center of the image will be the first color, and as it exands it will turn into the second color.
	
	Similar to linear backgrounds, we can set color stops.
	
	EXAMPLE
	
	background: radial-gradient(#5f2c82 40%, #3498db 60%);
	
	
5.2 Transformations

	The transform property is one of the newly minted CSS3 features.
	
	They are used to manipulate the shape of elements.
	
	There are two types of transformations. 2D and 3D. 3D transformations are discussed in the next section. 
	
	These are the transformations possible:
	
	Scew - Pushes the element, shifting it's top and bottom apart. 
	Scale - Makes the element move closer or further aay from the screen.
	Rotate - Rotates the element.
	Translate - Moves an element across the page from it's initial position.
	
	This image accurately represents each of the transforms possible: http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/15-768x240.png
	
	All transformations are done using the transform property, then the transform type with the value in brackets.
	
	transform: type(value);
	
	Multiple can be set at the same time by placing a space between them.
	
	See the Transforms Example for examples for each of these.
	
5.2.1 Rotate

	Rotations are clockwise by defaukt and measured in degrees.
	
	Anti-clockwise is done using the - sign. 
	
	EXAMPLE
	
	transform: rotate(10deg); 
	transform: rotate(-10deg);
	
	The first rotates it clockwise, the second anti-clockwise.
	

5.2.2 Scale

	Scaling an element increases or decreases it's size. 
	
	We can scale along both the x and y axis.
	
	EXAMPLE
	
	transform: scale(2, .5);
	
	This scales the element to be twice as large along the x axis, and half the size on the y axis.
	
	
5.2.3 Skew

	Skewing an element stretches it in one or more directions. 
	
	We can skew both the x and y axis.
	
	Values are calculated using degrees. 
	
	EXAMPLE
	
	transform: skew(5deg, 10deg)

	This skews 5deg n the x axis, and 10 on the y-axis.
	
	
5.2.4 Translate

	Translating an element offsets it's position.
	
	This is done using pixels, for both the x and y axis.
	
	EXAMPLE
	
	transform: transform: translate(200px, 100px);
	
	
5.3 3D Transformations

	Now that we've looked at 2D transformations along the x and y axis', we can look at transforming along the z axis.
	
	The syntax of 3D transformations have changed slightly. The type of transformation has "X" "Y" or "Z" on the end, and it only specifies a single value. 
	
	EXAMPLE
	
	transform: rotateZ(30deg);
	
	This can also be done for X and Y axis' for 3D transformations with them.
	
	See the Transformations Examples for examples of each of these.
	
	
5.3.1 3D Rotate

	This image best represents the effects of this. 
	
	http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/16-e1444405054123.png
	
	The element can be rotated in all 3 axis's.
	
	EXAMPLE
	
	transform: rotateX(30deg) transformY(30deg) rotate(30deg);
	
		
5.3.2 3D Translate

	Items can also be translated in 3D.
	
	This image shows the effects of this.
	
	http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/17-e1444405134471.png
	
	EXAMPLE
	
	transform: translateZ(30deg);
	
	
5.3.3. Perspective

	Perspective can be tricky to explain on a 3D screen.
	
	The perspective measurement is in pixels, between 0 and 1000px. 
	
	The principle is that, the higher the value, the further away the perspective appears.
	
	The lower the value, the closer the perspective appears.
	
	A low perspective value creates a sense of depth as you are closer to the object.
	
	EXAMPLE
	
	transform: perspective(600px) rotateY(45deg);
	
	This makes it appear like the left of the element is closer to the screen.
	
	
5.4 Transitions

	CSS3 transitions allow for smooth, simple and elegant animations for webpages to utilize. 
	
	Transitions can be added to any element so that when a specific (or any) property is changed, the change happens gradually.

	transition: [transition-property] [transition-duration] [transition-timing-function] [transition-delay];
	
	To apply a transition time for all transitions, simply do the below:
	
	transition: 0.5s;
	

5.5 Animations With CSS

	Now that we know what transitions are, we can learn more about how to do animations in CSS. 
	
	Wecan use keyframes to animate transitions.
	
	The difference between the two types is that the animation can start on page load, by delay etc rather than just an event such as hover.
	
	@keyframes identifier {
		/* Rule Sets */
	}
	
	The identifier is used to refer to the animation.
	
	The rule sets can use selectors such as percentages (66% { etc) or "from" and "to." The keyframe will then animate through these.
	
	The keyframe is then assosiated with an element by giving the element "animation-name: ;" in css.
	
	There are several other rules as well:
	
	animation-name: ; - Sets the name of the animation. The matching keyframe identifier will be it's animation.
	animation-duration: ; - Sets how long the animation will go on for.
	animation-delay: ; - Sets a delay for the animation.
	animation-timing-function: ; - Sets the type, such as "ease" or "linear".
	animation-fill-mode: ; -Setting this to "forwards" makes the element maintain the animation's end value upon finishing. 
	
	DON'T go overboard with animations. 
	
	See the animations example for tutorials on these. 
	
	
6 Mobile and Navbar - CSS Selectors 

	Video: https://youtu.be/iJKJr8zxSGo
	
	Mobile devices are more frequently used for browsing than a few years ago.
	
	As such we need to take this into account when building websites. 
	
	Constraints on screen size, internet and device speed are required when designing for mobile.
	
	Use of touchscreen is also very different to use of mouse, which will need to be understood for good accessibility.
	
	Outcomes:
	
	Responsive Design
	Mobile first
	Building site navigation
	CSS selectors
	Pseudo classes (:)
	Pseudo elements (::)
	Table Related Elements and Selectors


6.1 Mobile First

	When mobile browsing first began, it was niche and not very thought of.
	
	You'd most likely build a desktop version, then work your way down.
	
	Mobile First design reverses this, for several reasons, one being progressive enhancement.
	
	The philosophy behind progressive enhancement is to only show the very minimum needed for the device. The site can then gradually be enhanced for larger platforms. 

	As such, the code we write (or at least display) first is the CSS for mobile, then work our way up.
	
	We do this using media queries.  

6.2 Relative Widths

	One of the key parts of responsive design is use of relative widths instead of fixed widths.
	
	img {
		width: 720px; #Fixed width, will always take up 720px width on all devices.
	}
	
	img {
		width: 100%; #Relative width. Will change dynamically for all devices so that it takes up 100% of the width on that row.
	}
	
	
6.3 Media Queries 

	Media queries are badass. They allow us to set styles which only apply to devices within a certain width.
	
	This means the site can have different layouts for desktop, tablet and mobile without building different sites or requiring seperate stylesheets. 
	
	@media parameters {
	
		/* Styles will only be applied if it meets the parameter. */
	
	}
	
	
6.3.1 Parameters

	@media screen and (max-width: 400px) {

	The above first asks if we are using a screen, and if the screen width is less than 400px.
	
	If it is, styles located in the query will be read and applied. 
	
	
6.4 Setting the Viewport

	The first thing we want to do is to set the page width equal to the width of the device.
	
	The meta viewport tag gives the browser instructions on how to control the page dimensions and scaling.
	
	<meta name="viewport" content="width=device-width, initial-scale=1">

	This will force browsers to make use of 100% of the screen, including when the screen is rotated etc. 
	
	
