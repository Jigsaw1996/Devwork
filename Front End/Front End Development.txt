Front End Development Guide

	I will be using this document to note down everything that I have been learning in order to complete my Front End Developer Course. 
	
	OTHER RELEVENT DOCUMENTS
	HTML GUIDE
	CSS GUIDE
	JAVASCRIPT GUIDE
	
	GIT GUIDE

	
Contents

	1 Reopening the Box Model
		1.1 HTML Refresh
		1.2 Coding In An Editor
		1.3 The Box Model
		1.4 Border and Border Radius
	
	2 Reopening The Box Model 2
		2.1 Display Properties
		2.2 Centering Elements
		2.3 A Walk Through
		2.4 Shorthand
		2.5 Validator
		
	3 Positioning and CSS


1 Reopening the Box Model

	Video https://youtu.be/th_A4a6vPm0
	
	Here we will look into how web pages are structures and achieve an effective and clear design. 
	
	
1.1 HTML Refresh

	HTML stands for Hypertext Markup Language.
	
	The extention is .html
	
	It's used to provide structure and content to electronic documents, typically viewed in web browsers. 
	
	I've covered all this before and can all be viewed in the HTML guide, but lets have a short refresh. 

	A typical HTML Document
	
	<!DOCTYPE html>
	<html>
		<head>
			<title>Page Title</title>
		</head>
		<body>
			<h1>My Page</h1>
			<p>A paragraph</p>
			
	MOZILLA HAVE KINDLY PROVIDED AN ENTIRE LIST OF HTML ELEMENTS.

	https://developer.mozilla.org/en-US/docs/Web/HTML/Element
	
	OTHERWISE USE THE HTML DOCUMENT I MADE, THAT'S WHAT IT'S THERE FOR. 
	
	
1.2 Coding In An Editor

	The most popular editor at the moment is Sublime Text. 
	
	Download link here - http://www.sublimetext.com/3
	
	A few notes on files -
	- Don't save files with spaces.
	- Remember to keep git updated with changes. 
	- Sublime has a view in browser option on right click. Use it.
	
	
1.3 The Box Model

	Web Pages are comprised of HTML and CSS elements. Positioning these elements on a web page allows you to have complete control over how the page looks.
	
	Here we will look at how to control layout. 
	
	When discussing web design and layout, the "Box Model" os the collective term that is used to describe how elements are spaced on the page.
	
	The box model of an element works like the below. 
	
	Content Area
	Padding
	Border
	Margin
	=
	Total Width
	
	The Total Width is equal to all of the above factors, on both sides.
	
	See the box model example to see how this works. 

	
1.4 Border and Border Radius

	There are a number of border styles, as seen below:
	solid
	dashed
	dotted
	double
	groove
	ridge
	inset
	outset
	
	This can be individually set using the border-style: ; property. 
	

	Border Radius is a new CSS3 property. It gives rounded corners to a border without use of an image. 
	
	It works using the border-radius property. 
	
	border-radius: ;
	
	A circle is equal to the height/width, or 50% if working with percentages.

	
	It can be written with individual values for each corner. 
	
	For example: 
	
	border-radius: top-left top-right bottom-right bottom-left;
	
	Each corner can also have a different radius for either side, done using a / as seen below.
	
	border-radius: 120px/30px

	This gives both sides different values. 
	
	See the border radius examples for how this is done.
	
	
2 Reopening The Box Model

	Video - https://youtu.be/M3aq4tQvAOs

	Following on from the previous lesson, having the ability to control layout is highly dependent on the display property. 
	
	In this lesson we will discuss how you can apply different display properties to achieve various results. 
	
	We will also cover shorthand syntax. 
	
	
2.1 Display Properties

	For the purpose of CSS styling, elements can be divided into a few different categories. 
	
	Each element has it's own default display, but this can be manually changed in CSS to impact display. 
	
	The display types are below:
	Block - These elements take up the full width if it's line. Examples: <p> <h1> <div>
	Inline - These elements only take up the room they need to, and can sit alongside one another. Examples: <strong> <a> <span>
	Inline-block - This is a mix of the previous 2. Will sit alongside other element, but will accept height and width editing. Examples: <img>
	None - Item doesn't appear at all, taking up no room. 
	
	
2.2 Centering Elements

	To center inline elements within it's container, do the below. 
	
	text-align: center;
	
	To center block elements within it's container, the left and right margins have to be set to auto, so that the browser will automatically set them equally.
	
	margin: 0 auto;
	
	
2.3 A Walk Through

	Lets put these lessons into practice by demonstating how to make the following layout.
	
	http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/walkthru1-1-e1456941630446.png
	
	We make this by using inline-blocks for adjascent containers. 
	
	However inline-block elements have spacing issues, due to them typically being used for text.
	
	For exact spacing, using the float property is a great solution. We will come back to the idea of floats. 
	
	See the walkthrough example for the end result. 
	
	
2.4 Shorthand

	As already shown in the examples, we can write out padding, border and margin properties in a number of ways. 
	
	Longhand:
	margin-top: 20px;
	margin-right: 20px;
	margin-bottom: 20px;
	margin-left: 20px
	
	Simple Shorthand:
	margin: 20px;
	
	Ideal Shorthand:
	margin: 20px 20px 20px 20px;
	
	Similarly with borders:
	border-size: ;
	border-style: ;
	border-color: ;
	
	The last is ideal as it allows editing for each four corners seperately and makes it easy to come back to and edit. 
	
	Get into the habit of doing this. 
	
	Syntax:
	
	padding: top right bottom left;
	
	border: size type color;
	
	margin: top right bottom left;
	
	
2.5 Validator

	If you are looking to validate your code to make sure it is best practice and without any errors, use W3C.
	
	https://validator.w3.org

	Everyone prefers code that runs properly and without any annoying issues. 
	
	
3 Positioning and CSS