Front End Development Guide

	I will be using this document to note down everything that I have been learning in order to complete my Front End Developer Course. 
	
	OTHER RELEVENT DOCUMENTS
	HTML GUIDE
	CSS GUIDE
	JAVASCRIPT GUIDE
	
	GIT GUIDE

	
Contents

	1 Reopening the Box Model
		1.1 HTML Refresh
		1.2 Coding In An Editor
		1.3 The Box Model
		1.4 Border and Border Radius
	
	2 Reopening The Box Model 2
		2.1 Display Properties
		2.2 Centering Elements
		2.3 A Walk Through
		2.4 Shorthand
		2.5 Validator
		
	3 Positioning and CSS
		3.1 CSS3 Border Box
		3.2 Vendor Prefixes
		3.3 Positioning and Flow
			3.3.1 Static
			3.3.2 Relative
			3.3.3 Absolute
			3.3.4 Fixed
		

1 Reopening the Box Model

	Video https://youtu.be/th_A4a6vPm0
	
	Here we will look into how web pages are structures and achieve an effective and clear design. 
	
	
1.1 HTML Refresh

	HTML stands for Hypertext Markup Language.
	
	The extention is .html
	
	It's used to provide structure and content to electronic documents, typically viewed in web browsers. 
	
	I've covered all this before and can all be viewed in the HTML guide, but lets have a short refresh. 

	A typical HTML Document
	
	<!DOCTYPE html>
	<html>
		<head>
			<title>Page Title</title>
		</head>
		<body>
			<h1>My Page</h1>
			<p>A paragraph</p>
			
	MOZILLA HAVE KINDLY PROVIDED AN ENTIRE LIST OF HTML ELEMENTS.

	https://developer.mozilla.org/en-US/docs/Web/HTML/Element
	
	OTHERWISE USE THE HTML DOCUMENT I MADE, THAT'S WHAT IT'S THERE FOR. 
	
	
1.2 Coding In An Editor

	The most popular editor at the moment is Sublime Text. 
	
	Download link here - http://www.sublimetext.com/3
	
	A few notes on files -
	- Don't save files with spaces.
	- Remember to keep git updated with changes. 
	- Sublime has a view in browser option on right click. Use it.
	
	
1.3 The Box Model

	Web Pages are comprised of HTML and CSS elements. Positioning these elements on a web page allows you to have complete control over how the page looks.
	
	Here we will look at how to control layout. 
	
	When discussing web design and layout, the "Box Model" os the collective term that is used to describe how elements are spaced on the page.
	
	The box model of an element works like the below. 
	
	Content Area
	Padding
	Border
	Margin
	=
	Total Width
	
	The Total Width is equal to all of the above factors, on both sides.
	
	See the box model example to see how this works. 

	
1.4 Border and Border Radius

	There are a number of border styles, as seen below:
	solid
	dashed
	dotted
	double
	groove
	ridge
	inset
	outset
	
	This can be individually set using the border-style: ; property. 
	

	Border Radius is a new CSS3 property. It gives rounded corners to a border without use of an image. 
	
	It works using the border-radius property. 
	
	border-radius: ;
	
	A circle is equal to the height/width, or 50% if working with percentages.

	
	It can be written with individual values for each corner. 
	
	For example: 
	
	border-radius: top-left top-right bottom-right bottom-left;
	
	Each corner can also have a different radius for either side, done using a / as seen below.
	
	border-radius: 120px/30px

	This gives both sides different values. 
	
	See the border radius examples for how this is done.
	
	
2 Reopening The Box Model

	Video - https://youtu.be/M3aq4tQvAOs

	Following on from the previous lesson, having the ability to control layout is highly dependent on the display property. 
	
	In this lesson we will discuss how you can apply different display properties to achieve various results. 
	
	We will also cover shorthand syntax. 
	
	
2.1 Display Properties

	For the purpose of CSS styling, elements can be divided into a few different categories. 
	
	Each element has it's own default display, but this can be manually changed in CSS to impact display. 
	
	The display types are below:
	Block - These elements take up the full width if it's line. Examples: <p> <h1> <div>
	Inline - These elements only take up the room they need to, and can sit alongside one another. Examples: <strong> <a> <span>
	Inline-block - This is a mix of the previous 2. Will sit alongside other element, but will accept height and width editing. Examples: <img>
	None - Item doesn't appear at all, taking up no room. 
	
	
2.2 Centering Elements

	To center inline elements within it's container, do the below. 
	
	text-align: center;
	
	To center block elements within it's container, the left and right margins have to be set to auto, so that the browser will automatically set them equally.
	
	margin: 0 auto;
	
	
2.3 A Walk Through

	Lets put these lessons into practice by demonstating how to make the following layout.
	
	http://codeinstitute.wpengine.com/wp-content/uploads/2015/10/walkthru1-1-e1456941630446.png
	
	We make this by using inline-blocks for adjascent containers. 
	
	However this has it's issues. inline-block elements have natural spacing which can add to total widths etc, due to them typically being used for text.
	
	To solve this, we need to remove the white space. This is done by setting the font size of the parent container to 0. The children can then be given the font size.
	
	However this only works with px or % amounts. This doesn't work with ems. There are workarounds for this however. See here: https://davidwalsh.name/remove-whitespace-inline-block
	
	In any case, the example uses the following to create layouts:
	
	display: ;
	float: ;
	width: ; 
	height: ; - Left blank in some cases so that it will fit it's children.
	padding: ;
	margin: ;
	
	See the "Inline Block Positioning" example for how this is done.
	
	
2.4 Shorthand

	As already shown in the examples, we can write out padding, border and margin properties in a number of ways. 
	
	Longhand:
	margin-top: 20px;
	margin-right: 20px;
	margin-bottom: 20px;
	margin-left: 20px
	
	Simple Shorthand:
	margin: 20px;
	
	Ideal Shorthand:
	margin: 20px 20px 20px 20px;
	
	Similarly with borders:
	border-size: ;
	border-style: ;
	border-color: ;
	
	The last is ideal as it allows editing for each four corners seperately and makes it easy to come back to and edit. 
	
	Get into the habit of doing this. 
	
	Syntax:
	
	padding: top right bottom left;
	
	border: size type color;
	
	margin: top right bottom left;
	
	
2.5 Validator

	If you are looking to validate your code to make sure it is best practice and without any errors, use W3C.
	
	https://validator.w3.org

	Everyone prefers code that runs properly and without any annoying issues. 
	
	
3 Positioning and CSS

	Video: https://youtu.be/YT3UhoYL3B8

	In this lesson we peel back some CSS layers and see how it works. 

	We will look at the importance of positioning and flow in a document. 
	
	We will also reopen the Box Mode yet again and explore better ways of dealing with widths. 
	
	Includes:
	CSS3 Border-Box
	Position and Flow
	Absolute Positioning
	Developer Tools
	Fixed Positioning
	Cascading
	
	
3.1 CSS3 Border Box

	The last time we looked at the Box Model, we noted some of the difficulties involved in layout out a web page, including the maths.
	
	But what if you hate the maths? 1st World Problems right there.
	
	If you're lazy, CSS3 has border-box to make the maths easy. 
	
	Normal Full width:
	left margin + left border + left padding + content + right padding + right border + right margin = Full Width
	
	border-box Full Width:
	left margin + content + right margin = Full Width
	
	What this means is that you no longer have to worry about padding and border widths. 
	
	Border and padding are instead handled within the content width. 
	
	Syntax:
	
	box-sizing: border-box;
	
	The padding and border are contained as part of the content spacing. 
	
	
3.2 Vendor Prefixes

	Vendor Prefixes are a useful when it comes to elements not in full support yet.
	
	The CSS3 Spec is not fully signed off, so the browsers implement the features in their own way using prefixes until the entire spec is complete.
	
	This means that not all browsers fully support all tags.
	
	In time prefixes will disappear, but for now the newest tags need vendor prefixes. 
	
	Use the following site to see compatibility for tags: http://caniuse.com/
	
	See the CSS Guide for more info.
	
	These are the Vendor Prefixes. 
	
	Chrome, Safari, Newer Opera, Android  = -webkit-
	Firefox = -moz-
	Internet Explorer, Windows Edge = -ms-
	Older Opera = -Opera-
	

3.3 Positioning and Flow

	CSS allows us to position content on pages whichever way we want. This is one of CSS's key uses.
	
	We are going to continue using inline-blocks for most layout purposes and then look at flexboxes.

	An HTML page has flow, this is how elements know where they are to be positioned. Elements can position themselves in certain ways that go with or break the flow.
	
	Elements with flow interact with one another, either making space to be stacked above/below, or next to one another. 
	
	There are several position types which define the flow.
	
	Position Types
	
	Static
	Relative
	Absolute
	Fixed
	
	
3.3.1 Static

	Static is the default positioning of an element, where everything is stacked on top of one another. Everything flows down the page.
	
	This is what you're used to, unless explicitly changed. 
	
	
3.3.2 Relative

	Relative positioning maintains flow, taking the static position but allows us to offset the element in a certain direction. 
	
	For instance, we can set the element 100px to the left, and 10px the top, from it's original position.
	
	NOTE: IT STILL LEAVES SPACE WHERE THE ELEMENT WAS ORIGINALLY, THEREFORE NOT BREAKING THE FLOW OF THE PAGE.
	
	Moving elements can make them overlap. Use z-index: ; to set position. The highest number is displayed on top.
	
	Relative positioning is important as it interacts with absolute positioning.
	
	
3.3.3 Absolute

	Absolute positioning breaks the flow of the page. 
	
	The space which would normally be given to the element in the flow is instead occupied by the next in-flow item. 
	
	Similar to relative positioning, they can be moved around, only they are moved from the top left of their parent element, providing it uses relative positioning. 
	
	This gives a meaningful relationship between absolute children and their relative parents. 
	
	Moving elements can make them overlap. Use z-index: ; to set position. The highest number is displayed on top.
	
	
3.3.4 Fixed

	Fixed elements break the flow completely, not paying any attention to it. 
	
	The element will be fixed on the screen, not moving if scrolled etc. 
	
	They can be moved across the screen, relative to the top left corner of the user's screen. 
	
	Moving elements can make them overlap. Use z-index: ; to set position. The highest number is displayed on top.
	
	